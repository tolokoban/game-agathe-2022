"use strict";(self.webpackChunkagathe_2022=self.webpackChunkagathe_2022||[]).push([[143],{424:(e,t,r)=>{r.d(t,{Z:()=>u});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"body,\nhtml {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem .5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 .5rem .5rem #ff8e;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,+BAA+B;IAC/B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,YAAY;IACZ,mBAAmB;IACnB,wBAAwB;IACxB,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;IAC1B,2BAA2B;IAC3B,iCAAiC;IACjC,gCAAgC;AACpC;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,cAAc;IACd;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;IAC3E,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;AAC/E;;AAEA;IACI,kDAAkD;IAClD,qBAAqB;IACrB,iDAAiD;IACjD;;;;;;;;;;;;;;;;;;;SAmBK;AACT;;AAEA;IACI;;;;;;;;;;;;;;;;;;;SAmBK;IACL,kDAAkD;IAClD,qBAAqB;IACrB,iCAAiC;AACrC",sourcesContent:["body,\nhtml {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem .5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 .5rem .5rem #ff8e;\n}\n"],sourceRoot:""}]);const u=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);n&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},981:(e,t,r)=>{r.r(t),r.d(t,{default:()=>g});var n=r(379),o=r.n(n),a=r(795),i=r.n(a),u=r(569),s=r.n(u),c=r(565),l=r.n(c),f=r(216),p=r.n(f),d=r(589),h=r.n(d),v=r(424),m={};m.styleTagTransform=h(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=p(),o()(v.Z,m);const g=v.Z&&v.Z.locals?v.Z.locals:void 0},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],u=0;u<e.length;u++){var s=e[u],c=n.base?s[0]+n.base:s[0],l=a[c]||0,f="".concat(c," ").concat(l);a[c]=l+1;var p=r(f),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=o(d,n);n.byIndex=u,t.splice(u,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var u=r(a[i]);t[u].references--}for(var s=n(e,o),c=0;c<a.length;c++){var l=r(a[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},957:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(242),o=function(){function e(){var e=this;this.col=0,this.row=0,this.x=0,this.y=0,this.size=2/n.COLUMNS,this.target=0,this.onPointerMove=function(t){var r,o=t.target.clientWidth,a=(r=t.clientX/o)<0?0:r>=1?.999999:r;e.target=2*(Math.floor(n.COLUMNS*a)+.5)/n.COLUMNS-1}}return e.prototype.anim=function(e){var t=.008*e;this.target<this.x?this.x=Math.max(this.target,this.x-t):this.x=Math.min(this.target,this.x+t)},e}();t.default=o},851:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{s(n.next(e))}catch(e){a(e)}}function u(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchAsset=t.fetchAssets=void 0,t.fetchAssets=function(e,t){return r(this,void 0,void 0,(function(){var r,a,u,s,c,l,f,p,d,h;return n(this,(function(n){switch(n.label){case 0:r={},t(0),a=Object.keys(e),u=0,n.label=1;case 1:n.trys.push([1,6,7,8]),s=o(a),c=s.next(),n.label=2;case 2:return c.done?[3,5]:(l=c.value,u++,t(u/a.length),[4,i(e[l])]);case 3:(f=n.sent())&&(r[l]=f),n.label=4;case 4:return c=s.next(),[3,2];case 5:return[3,8];case 6:return p=n.sent(),d={error:p},[3,8];case 7:try{c&&!c.done&&(h=s.return)&&h.call(s)}finally{if(d)throw d.error}return[7];case 8:return t(1),[2,r]}}))}))};var a=new Set;function i(e){return r(this,void 0,void 0,(function(){var t=this;return n(this,(function(o){return[2,new Promise((function(o){return r(t,void 0,void 0,(function(){var t,r,i,s,c;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,5,,6]),u(e,"jpg","png","gif","svg")?((t=new Image).crossOrigin="anonymous",t.onload=function(){return o(t)},t.onerror=function(t){console.error('Unable to load image "'+e+'":',e),console.error(t),o(void 0)},t.src=e,[3,4]):[3,1];case 1:return u(e,"ogg","wav","mp3")?(r=document.createElement("audio"),i=function(){a.has(r)||(a.add(r),o(r))},r.addEventListener("canplay",i),r.addEventListener("loadeddata",i),window.setTimeout(i,3e3),r.addEventListener("error",(function(t){console.error('Unable to load sound "'+e+'":',e),console.error(t),o(void 0)})),r.src=e,console.log("Loading audio: ",e),[3,4]):[3,2];case 2:return[4,fetch(e)];case 3:s=n.sent(),o(u(e,"json")?s.json():s.text()),n.label=4;case 4:return[3,6];case 5:return c=n.sent(),console.error('Unable to load "'.concat(e,'"!'),c),o(void 0),[3,6];case 6:return[2]}}))}))}))]}))}))}function u(e){for(var t,r,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];try{for(var i=o(n),u=i.next();!u.done;u=i.next()){var s=u.value;if(e.endsWith(".".concat(s)))return!0}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return!1}t.fetchAsset=i},242:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SPEED=t.MARGIN=t.COLUMNS=void 0,t.COLUMNS=5,t.MARGIN=.1,t.SPEED=1e-4},465:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{s(n.next(e))}catch(e){a(e)}}function u(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),r(981);var a=r(851),i=r(698),u={floorTexture:"assets/img/floor.jpg",wallTexture:"assets/img/wall.jpg",spritesTexture:"assets/img/sprites.png"};!function(){n(this,void 0,void 0,(function(){var e,t,r;return o(this,(function(n){switch(n.label){case 0:return console.log("Loading assets..."),e=function(){var e,t=document.createElement("progress");return t.setAttribute("id","tgd-progress"),t.setAttribute("min","0"),t.setAttribute("max","100"),null===(e=document.getElementById("tgd-logo"))||void 0===e||e.appendChild(t),t}(),[4,(0,a.fetchAssets)(u,(function(t){e.setAttribute("value","".concat(100*t))}))];case 1:if(t=n.sent(),console.log("Assets loaded."),!(r=document.getElementById("canvas")))throw Error("Unable to find main Canvas!");return(0,i.startApplication)(r,t),function(){var e=document.getElementById("tgd-logo");if(!e)throw Error("There is no splash screen!");e.style.setProperty("--duration","".concat(900,"ms")),e.classList.add("vanish"),window.setTimeout((function(){document.body.removeChild(e)}),900)}(),[2]}}))}))}()},698:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.startApplication=void 0;var o=n(r(875)),a=n(r(6)),i=n(r(248)),u=r(594),s=n(r(948));t.startApplication=function(e,t){var r;r=t,(0,u.assertImage)(r.floorTexture,"data.floorTexture"),(0,u.assertImage)(r.wallTexture,"data.wallTexture"),(0,u.assertImage)(r.spritesTexture,"data.spritesTexture");var n=new o.default(e),c=new s.default(n.gl,t.spritesTexture);n.setPainters([new i.default(n.gl,t.floorTexture),new a.default(n.gl,t.wallTexture),c]),n.play()}},966:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(242),u=a(r(384)),s=r(919),c=1-i.MARGIN,l=function(e){function t(r,n){var o=e.call(this,r)||this;o.texture=(0,s.createTextureFromImageRepeat)(r,n);var a=t.createDataArray(4);return t.pokeData(a,0,-c,1,0,0),t.pokeData(a,1,+c,1,1,0),t.pokeData(a,2,-c,-1,0,1),t.pokeData(a,3,+c,-1,1,1),o.pushData(a),o}return o(t,e),t.prototype.anim=function(e){},t.prototype.actualPaint=function(e){var t=this.gl,r=t.canvas,n=r.width,o=r.height;t.disable(t.BLEND),t.disable(t.DEPTH_TEST),this.$uniTexture(this.texture),this.$uniScreen(n,o),this.$uniShrink(c),this.$uniSpeed(i.SPEED),this.$uniTime(e),t.drawArrays(t.TRIANGLE_STRIP,0,4)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t}(u.default);t.default=l},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.gl=e;var t=e.createBuffer();if(!t)throw Error("Unable to create WebGL Buffer!");var r=e.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var i=n(e,e.VERTEX_SHADER,o),u=n(e,e.FRAGMENT_SHADER,a);e.attachShader(r,i),e.attachShader(r,u),e.linkProgram(r),this.prg=r,this.vertBuff=t}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(4*e)},e.pokeData=function(e,t,r,n,o,a){var i=4*t;e[i++]=r,e[i++]=n,e[i++]=o,e[i++]=a},e.prototype.pushData=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},e.prototype.$uniShrink=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniShrink");t.uniform1f(n,e)},e.prototype.$uniSpeed=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniSpeed");t.uniform1f(n,e)},e.prototype.$uniTime=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTime");t.uniform1f(n,e)},e.prototype.$uniScreen=function(e,t){var r=this.gl,n=this.prg,o=r.getUniformLocation(n,"uniScreen");r.uniform2f(o,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},e.prototype.paint=function(e){var t=this.gl,r=this.prg;t.useProgram(r);var n=Float32Array.BYTES_PER_ELEMENT,o=4*n;t.bindBuffer(t.ARRAY_BUFFER,this.vertBuff),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,o,0*n),t.enableVertexAttribArray(1),t.vertexAttribPointer(1,2,t.FLOAT,!1,o,2*n),this.actualPaint(e)},e}();function n(e,t,r){var n,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(n=e.getShaderInfoLog(o))&&void 0!==n?n:"Unknow error while compiling the shader!");return o}t.default=r;var o="/**/uniform float uniTime;\nuniform float uniSpeed;\nuniform float uniShrink;\nuniform vec2 uniScreen;\nattribute vec2 attPos;\nattribute vec2 attUV;\nvarying vec2 varUV;\nvoid main(){float w=uniScreen.x;\nfloat h=uniScreen.y;\nfloat scaleV=h/(w*uniShrink);\nvarUV=vec2(attUV.x,attUV.y*scaleV+uniTime*uniSpeed);\ngl_Position=vec4(attPos.x,attPos.y,1.0,1.0);}",a="precision mediump float;\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\nvoid main(){vec3 color=texture2D(uniTexture,varUV).rgb;\ngl_FragColor=vec4(color,1.0);}"},248:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(966);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(o).default}})},475:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.gl=e;var t=e.createBuffer();if(!t)throw Error("Unable to create WebGL Buffer!");var r=e.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var i=n(e,e.VERTEX_SHADER,o),u=n(e,e.FRAGMENT_SHADER,a);e.attachShader(r,i),e.attachShader(r,u),e.linkProgram(r),this.prg=r,this.vertBuff=t}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(5*e)},e.pokeData=function(e,t,r,n,o,a,i){var u=5*t;e[u++]=r,e[u++]=n,e[u++]=o,e[u++]=a,e[u++]=i},e.swapData=function(e,t,r){var n=5*t,o=5*t,a=0;a=e[n],e[n++]=e[o],e[o++]=a,a=e[n],e[n++]=e[o],e[o++]=a,a=e[n],e[n++]=e[o],e[o++]=a,a=e[n],e[n++]=e[o],e[o++]=a,a=e[n],e[n++]=e[o],e[o++]=a},e.prototype.pushData=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.DYNAMIC_DRAW)},e.prototype.$uniShrink=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniShrink");t.uniform1f(n,e)},e.prototype.$uniScreen=function(e,t){var r=this.gl,n=this.prg,o=r.getUniformLocation(n,"uniScreen");r.uniform2f(o,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},e.prototype.paint=function(e){var t=this.gl,r=this.prg;t.useProgram(r);var n=Float32Array.BYTES_PER_ELEMENT,o=5*n;t.bindBuffer(t.ARRAY_BUFFER,this.vertBuff),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,o,0*n),t.enableVertexAttribArray(1),t.vertexAttribPointer(1,1,t.FLOAT,!1,o,2*n),t.enableVertexAttribArray(2),t.vertexAttribPointer(2,2,t.FLOAT,!1,o,3*n),this.actualPaint(e)},e}();function n(e,t,r){var n,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(n=e.getShaderInfoLog(o))&&void 0!==n?n:"Unknow error while compiling the shader!");return o}t.default=r;var o="// Screen width and height.\nuniform vec2 uniScreen;\n// Shrink factor of the corridor compared to the screen width.\nuniform float uniShrink;\n\nattribute vec2 attPos;\nattribute float attSize;\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    varUV = attUV;\n    float w = uniScreen.x * uniShrink;\n    float h = uniScreen.y;\n    gl_PointSize = attSize * w;\n    gl_Position = vec4( \n        attPos.x * uniShrink, \n        0.8 + attPos.y * h / w, 1.0, 1.0 \n    );\n}\n",a="precision mediump float;\n\n// Atlas of 8x8 sprites.\nuniform sampler2D uniTexture;\n\n// Size of a a side of a square tile in the sprites' atlas.\nconst float TILE = 1.0 / 8.0;\n\nvarying vec2 varUV;\n\nvoid main() {\n  gl_FragColor = texture2D( uniTexture, varUV + TILE * gl_PointCoord );\n}\n"},1:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(502);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(o).default}})},502:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=r(242),s=r(919),c=i(r(475)),l=1-u.MARGIN,f=function(e){function t(r,n,o){var a=e.call(this,r)||this;return a.sprites=o,a.texture=(0,s.createTextureFromImage)(r,n),a.data=t.createDataArray(o.length),a.updateData(),a}return o(t,e),t.prototype.anim=function(e){this.updateData()},t.prototype.actualPaint=function(e){var t=this.gl,r=t.canvas,n=r.width,o=r.height;t.disable(t.DEPTH_TEST),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),this.$uniTexture(this.texture),this.$uniShrink(l),this.$uniScreen(n,o),t.drawArrays(t.POINTS,0,this.sprites.length)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t.prototype.updateData=function(){var e,r,n=this.data,o=0;try{for(var i=a(this.sprites),u=i.next();!u.done;u=i.next()){var s=u.value;t.pokeData(n,o++,s.x,s.y,s.size,.125*s.col,.125*s.row)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}this.pushData(n)},t}(c.default);t.default=f},480:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.gl=e;var t=e.createBuffer();if(!t)throw Error("Unable to create WebGL Buffer!");var r=e.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var i=n(e,e.VERTEX_SHADER,o),u=n(e,e.FRAGMENT_SHADER,a);e.attachShader(r,i),e.attachShader(r,u),e.linkProgram(r),this.prg=r,this.vertBuff=t}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(4*e)},e.pokeData=function(e,t,r,n,o,a){var i=4*t;e[i++]=r,e[i++]=n,e[i++]=o,e[i++]=a},e.prototype.pushData=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},e.prototype.$uniShrink=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniShrink");t.uniform1f(n,e)},e.prototype.$uniSpeed=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniSpeed");t.uniform1f(n,e)},e.prototype.$uniTime=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTime");t.uniform1f(n,e)},e.prototype.$uniScreen=function(e,t){var r=this.gl,n=this.prg,o=r.getUniformLocation(n,"uniScreen");r.uniform2f(o,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},e.prototype.paint=function(e){var t=this.gl,r=this.prg;t.useProgram(r);var n=Float32Array.BYTES_PER_ELEMENT,o=4*n;t.bindBuffer(t.ARRAY_BUFFER,this.vertBuff),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,o,0*n),t.enableVertexAttribArray(1),t.vertexAttribPointer(1,2,t.FLOAT,!1,o,2*n),this.actualPaint(e)},e}();function n(e,t,r){var n,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(n=e.getShaderInfoLog(o))&&void 0!==n?n:"Unknow error while compiling the shader!");return o}t.default=r;var o="/*\n\n*/\n\nuniform float uniTime;\nuniform float uniSpeed;\nuniform float uniShrink;\n// Screen width and height.\nuniform vec2 uniScreen;\n\nattribute vec2 attPos;\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    float w = uniScreen.x;\n    float h = uniScreen.y;\n    float scaleV = h / (w * uniShrink);\n    varUV = attUV * vec2(scaleV, 1.0)\n        - vec2(uniTime * uniSpeed * 0.0000000001, 0.0);\n    gl_Position = vec4( attPos.x, attPos.y, 1.0, 1.0 );\n}\n",a="precision mediump float;\n\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec3 color = texture2D( uniTexture, varUV ).rgb;\n  gl_FragColor = vec4( color, 1.0 );\n}\n"},6:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(709);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(o).default}})},709:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(242),u=a(r(480)),s=r(919),c=1-i.MARGIN,l=i.SPEED*(2*(1-i.MARGIN))/i.MARGIN,f=function(e){function t(r,n){var o=e.call(this,r)||this;o.texture=(0,s.createTextureFromImageRepeat)(r,n);var a=t.createDataArray(4);return t.pokeData(a,0,-1,1.1,1,0),t.pokeData(a,1,-c,1,1,1),t.pokeData(a,2,-1,-1.1,0,0),t.pokeData(a,3,-c,-1,0,1),o.pushData(a),o}return o(t,e),t.prototype.anim=function(e){},t.prototype.actualPaint=function(e){var t=this.gl,r=t.canvas,n=r.width,o=r.height;t.disable(t.BLEND),t.disable(t.DEPTH_TEST),this.$uniTexture(this.texture),this.$uniScreen(n,o),this.$uniShrink(2*i.MARGIN),this.$uniSpeed(l),this.$uniTime(e),t.drawArrays(t.TRIANGLE_STRIP,0,4)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t}(u.default);t.default=f},948:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(957)),a=n(r(1)),i=function(){function e(e,t){this.gl=e,this.lastTime=0;var r=new o.default;this.cat=r,e.canvas.addEventListener("pointerdown",r.onPointerMove),e.canvas.addEventListener("pointermove",r.onPointerMove);var n=new a.default(e,t,[r]);this.painter=n}return e.prototype.paint=function(e){this.painter.paint(e)},e.prototype.anim=function(e){if(this.lastTime>0){var t=e-this.lastTime;this.cat.anim(t),this.painter.anim(e)}this.lastTime=e},e.prototype.destroy=function(){this.gl.canvas.addEventListener("pointerdown",this.cat.onPointerMove),this.gl.canvas.addEventListener("pointermove",this.cat.onPointerMove)},e}();t.default=i},594:(e,t)=>{function r(e){return!Array.isArray(e)&&"object"==typeof e}function n(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.assertImage=t.assertString=t.isString=t.assertObject=t.isObject=void 0,t.isObject=r,t.assertObject=function(e,t){if(void 0===t&&(t="data"),!r(e))throw Error("".concat(t," was expected to be an object but we got ").concat(typeof e,"!"))},t.isString=n,t.assertString=function(e,t){if(void 0===t&&(t="data"),!n(e))throw Error("".concat(t," was expected to be a string but we got ").concat(typeof e,"!"))},t.assertImage=function(e,t){if(void 0===t&&(t="data"),!(e instanceof HTMLImageElement))throw Error("".concat(t," was expected to be an Image but we got ").concat(typeof e,"!"))}},875:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(319);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(o).default}})},319:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){var t=this;this.canvas=e,this.painters=[],this.playing=!1,this.paint=function(e){var n,o;try{for(var a=r(t.painters),i=a.next();!i.done;i=a.next())i.value.paint(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(o=a.return)&&o.call(a)}finally{if(n)throw n.error}}},this.anim=function(e){var n,o;try{for(var a=r(t.painters),i=a.next();!i.done;i=a.next())i.value.anim(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(o=a.return)&&o.call(a)}finally{if(n)throw n.error}}};var n=e.getContext("webgl");if(!n)throw Error("Unable to create WebGL Context!");this.gl=n,new ResizeObserver((function(n){var o,a;try{for(var i=r(n),u=i.next();!u.done;u=i.next())if(u.value.target===e){var s=e.clientWidth,c=e.clientHeight;t.resize(s,c)}}catch(e){o={error:e}}finally{try{u&&!u.done&&(a=i.return)&&a.call(i)}finally{if(o)throw o.error}}})).observe(e)}return e.prototype.setPainters=function(e){this.painters=e},e.prototype.play=function(){var e=this;if(!this.playing){this.playing=!0;var t=function(r){e.paint(r),e.anim(r),e.playing&&window.requestAnimationFrame(t)};window.requestAnimationFrame(t)}},e.prototype.stop=function(){this.playing=!1},e.prototype.resize=function(e,t){var r=this;window.requestAnimationFrame((function(){var n=r,o=n.gl,a=n.canvas;a.setAttribute("width","".concat(e)),a.setAttribute("height","".concat(t)),o.viewport(0,0,e,t)}))},e}();t.default=n},919:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(910),t)},910:(e,t)=>{function r(e){var t=e.createTexture();if(!t)throw Error("Unable to create WebGL texture!");return t}Object.defineProperty(t,"__esModule",{value:!0}),t.textureRepeatVertical=t.textureRepeatHorizontal=t.textureRepeat=t.textureClampToEdgeVertical=t.textureClampToEdgeHorizontal=t.textureClampToEdge=t.createTextureFromImageRepeat=t.createTextureFromImage=t.createTexture=void 0,t.createTexture=r,t.createTextureFromImage=function(e,t){var n=r(e);return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n},t.createTextureFromImageRepeat=function(e,t){var n=r(e);return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n},t.textureClampToEdge=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureClampToEdgeHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)},t.textureClampToEdgeVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureRepeat=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)},t.textureRepeatHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT)},t.textureRepeatVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)}}},e=>{e(e.s=465)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
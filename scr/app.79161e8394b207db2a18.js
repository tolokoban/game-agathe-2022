"use strict";(self.webpackChunkagathe_2022=self.webpackChunkagathe_2022||[]).push([[143],{424:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"html {\n    font-size: 5vh;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    background-color: #000;\n    font-family: sans-serif;\n}\n\nbody {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    display: grid;\n    place-items: center;\n}\n\n@media (orientation: landscape) {\n    body {\n        left: 50%;\n        margin-left: calc(-60vh / 2);\n        width: 60vh;\n    }\n}\n\n#score {\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0.25em;\n    border-radius: 0 0 0.5em 0;\n    background-color: #fffd;\n    color: #333;\n    text-align: center;\n    font-weight: bolder;\n    pointer-events: none;\n}\n\n#lives {\n    position: absolute;\n    right: 0;\n    top: 0;\n    margin: 0;\n    padding: 0.25em;\n    border-radius: 0 0 0 0.5em;\n    background-color: #fffd;\n    color: #333;\n    text-align: center;\n    font-weight: bolder;\n    pointer-events: none;\n}\n\ndiv.hint {\n    opacity: 0.5;\n    font-size: 50%;\n}\n\n#message-warning {\n    z-index: 1;\n    background: #0007;\n    color: #f80;\n    padding: 0 0.5em;\n    border-radius: 999vmax;\n    transition: opacity 0.2s;\n    opacity: 1;\n    pointer-events: none;\n}\n\n#message-warning.hide {\n    opacity: 0;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem 0.5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem 0.5rem #ff8e;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,UAAU;IACV,gBAAgB;IAChB,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,UAAU;IACV,gBAAgB;IAChB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI;QACI,SAAS;QACT,4BAA4B;QAC5B,WAAW;IACf;AACJ;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,SAAS;IACT,eAAe;IACf,0BAA0B;IAC1B,uBAAuB;IACvB,WAAW;IACX,kBAAkB;IAClB,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,MAAM;IACN,SAAS;IACT,eAAe;IACf,0BAA0B;IAC1B,uBAAuB;IACvB,WAAW;IACX,kBAAkB;IAClB,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,iBAAiB;IACjB,WAAW;IACX,gBAAgB;IAChB,sBAAsB;IACtB,wBAAwB;IACxB,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,+BAA+B;IAC/B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,YAAY;IACZ,mBAAmB;IACnB,wBAAwB;IACxB,iCAAiC;IACjC,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;IAC1B,2BAA2B;IAC3B,iCAAiC;IACjC,gCAAgC;AACpC;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,cAAc;IACd;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;IAC3E,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;AAC/E;;AAEA;IACI,kDAAkD;IAClD,qBAAqB;IACrB,iDAAiD;IACjD;;;;;;;;;;;;;;;;;;;SAmBK;AACT;;AAEA;IACI;;;;;;;;;;;;;;;;;;;SAmBK;IACL,kDAAkD;IAClD,qBAAqB;IACrB,mCAAmC;AACvC",sourcesContent:["html {\n    font-size: 5vh;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    background-color: #000;\n    font-family: sans-serif;\n}\n\nbody {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    display: grid;\n    place-items: center;\n}\n\n@media (orientation: landscape) {\n    body {\n        left: 50%;\n        margin-left: calc(-60vh / 2);\n        width: 60vh;\n    }\n}\n\n#score {\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0.25em;\n    border-radius: 0 0 0.5em 0;\n    background-color: #fffd;\n    color: #333;\n    text-align: center;\n    font-weight: bolder;\n    pointer-events: none;\n}\n\n#lives {\n    position: absolute;\n    right: 0;\n    top: 0;\n    margin: 0;\n    padding: 0.25em;\n    border-radius: 0 0 0 0.5em;\n    background-color: #fffd;\n    color: #333;\n    text-align: center;\n    font-weight: bolder;\n    pointer-events: none;\n}\n\ndiv.hint {\n    opacity: 0.5;\n    font-size: 50%;\n}\n\n#message-warning {\n    z-index: 1;\n    background: #0007;\n    color: #f80;\n    padding: 0 0.5em;\n    border-radius: 999vmax;\n    transition: opacity 0.2s;\n    opacity: 1;\n    pointer-events: none;\n}\n\n#message-warning.hide {\n    opacity: 0;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem 0.5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem 0.5rem #ff8e;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},981:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var r=n(379),o=n.n(r),i=n(795),a=n.n(i),s=n(569),u=n.n(s),c=n(565),l=n.n(c),f=n(216),d=n.n(f),h=n(589),p=n.n(h),A=n(424),v={};v.styleTagTransform=p(),v.setAttributes=l(),v.insert=u().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),o()(A.Z,v);const m=A.Z&&A.Z.locals?A.Z.locals:void 0},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var u=e[s],c=r.base?u[0]+r.base:u[0],l=i[c]||0,f="".concat(c," ").concat(l);i[c]=l+1;var d=n(f),h={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var p=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:p,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var u=r(e,o),c=0;c<i.length;c++){var l=n(i[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},948:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(242),o=n(489),i=n(421),a=1.3/r.COLUMNS,s=function(){function e(){var e=this;this.col=0,this.row=0,this.x=0,this.y=0,this.size=a,this.bounceAlpha=(0,i.makeBounceAlpha)(.5,200),this.time=0,this.target=0,this.onPointerMove=function(t){var n=t.target.getBoundingClientRect(),i=n.left,a=n.width,s=(0,o.clamp)((t.clientX-i)/a);e.target=2*(Math.floor(r.COLUMNS*s)+.5)/r.COLUMNS-1},this.onKeyDown=function(t){if("ArrowRight"===t.key)(n=e.getColumn())<r.COLUMNS-1&&(e.target=u(n+1));else if("ArrowLeft"===t.key){var n;(n=e.getColumn())>0&&(e.target=u(n-1))}}}return e.prototype.getColumn=function(){return Math.floor(r.COLUMNS*(.5*(1+this.x)))},e.prototype.anim=function(e,t){this.time=e;var n=.008*t;this.target<this.x?this.x=Math.max(this.target,this.x-n):this.x=Math.min(this.target,this.x+n),this.effect&&this.effect(e)},e.prototype.miam=function(){var e=this,t=this.time;this.effect=function(n){var r=e.bounceAlpha(n-t);e.size=a*(1+r),e.col=r>0?1:0}},e}();function u(e){return 2*(e+.5)/r.COLUMNS-1}t.default=s},632:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(242),i=n(489);!function(e){e[e.dead=0]="dead",e[e.alive=1]="alive",e[e.escaping=2]="escaping",e[e.escaped=3]="escaped"}(r||(r={}));var a=function(){function e(e){this.context=e,this.col=1,this.row=1,this.x=0,this.y=0,this.size=1/o.COLUMNS,this.column=0,this.speed=(0,i.rand)(1,3),this.state=r.dead,this.reborn()}return e.prototype.anim=function(e,t){var n=this.state;if(this.col=Math.floor(e*this.speed*8)%4,n!==r.dead){var o=this.speed*t;this.y+=o,this.y>0&&(n===r.alive?(this.state=r.escaping,this.context.fireMouseNearCat(this)):n===r.escaping&&(this.state=r.escaped,this.context.fireMouseEscaped(this))),this.y>.5&&this.reborn()}else this.x=999},e.prototype.reborn=function(){var e=this.context.getNextMission();this.mission=e,this.state=r.alive,this.column=e.column,this.x=(e.column+.5)/o.COLUMNS*2-1,this.y=-e.time*e.speed,this.speed=e.speed,this.row=e.bonus?2:1},e.prototype.getColumn=function(){return this.column},e.prototype.swallowed=function(){this.state=r.dead,this.reborn()},e}();t.default=a},421:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.makeBounceAlpha=void 0,t.makeBounceAlpha=function(e,t){if(t<=0)return function(){return 0};var n=-4*e/(t*t),r=-n*t;return function(e){return e<0||e>t?0:n*e*e+r*e}}},851:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchAsset=t.fetchAssets=void 0,t.fetchAssets=function(e,t){return n(this,void 0,void 0,(function(){var n,i,s,u,c,l,f,d,h,p;return r(this,(function(r){switch(r.label){case 0:n={},t(0),i=Object.keys(e),s=0,r.label=1;case 1:r.trys.push([1,6,7,8]),u=o(i),c=u.next(),r.label=2;case 2:return c.done?[3,5]:(l=c.value,s++,t(s/i.length),[4,a(e[l])]);case 3:(f=r.sent())&&(n[l]=f),r.label=4;case 4:return c=u.next(),[3,2];case 5:return[3,8];case 6:return d=r.sent(),h={error:d},[3,8];case 7:try{c&&!c.done&&(p=u.return)&&p.call(u)}finally{if(h)throw h.error}return[7];case 8:return t(1),[2,n]}}))}))};var i=new Set;function a(e){return n(this,void 0,void 0,(function(){var t=this;return r(this,(function(o){return[2,new Promise((function(o){return n(t,void 0,void 0,(function(){var t,n,a,u,c;return r(this,(function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),s(e,"jpg","png","gif","svg")?((t=new Image).crossOrigin="anonymous",t.onload=function(){return o(t)},t.onerror=function(t){console.error('Unable to load image "'+e+'":',e),console.error(t),o(void 0)},t.src=e,[3,4]):[3,1];case 1:return s(e,"ogg","wav","mp3")?(n=document.createElement("audio"),a=function(){i.has(n)||(i.add(n),o(n))},n.addEventListener("canplay",a),n.addEventListener("loadeddata",a),window.setTimeout(a,3e3),n.addEventListener("error",(function(t){console.error('Unable to load sound "'+e+'":',e),console.error(t),o(void 0)})),n.src=e,console.log("Loading audio: ",e),[3,4]):[3,2];case 2:return[4,fetch(e)];case 3:u=r.sent(),o(s(e,"json")?u.json():u.text()),r.label=4;case 4:return[3,6];case 5:return c=r.sent(),console.error('Unable to load "'.concat(e,'"!'),c),o(void 0),[3,6];case 6:return[2]}}))}))}))]}))}))}function s(e){for(var t,n,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];try{for(var a=o(r),s=a.next();!s.done;s=a.next()){var u=s.value;if(e.endsWith(".".concat(u)))return!0}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return!1}t.fetchAsset=a},242:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DECREASE_DELTAT_TIME=t.START_DELTA_TIME=t.MOUSE_COUNT=t.SPEED=t.MARGIN=t.COLUMNS=void 0,t.COLUMNS=5,t.MARGIN=.15,t.SPEED=4e-4,t.MOUSE_COUNT=9,t.START_DELTA_TIME=1e3,t.DECREASE_DELTAT_TIME=5},65:function(e,t){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){var t=this;void 0===e&&(e=""),this.name=e,this.listeners=[],this.fire=function(e){var r,o;try{for(var i=n(t.listeners),a=i.next();!a.done;a=i.next()){var s=a.value;try{s(e)}catch(n){console.error("[".concat(t.name,"] Error in a listener!")),console.error(">  ex.: ",n),console.error(">  arg.: ",e)}}}catch(e){r={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.listeners.length},enumerable:!1,configurable:!0}),e.prototype.add=function(e){this.remove(e),this.listeners.push(e)},e.prototype.remove=function(e){this.listeners=this.listeners.filter((function(t){return t!==e}))},e.prototype.removeAll=function(){this.listeners.splice(0,this.listeners.length)},e}();t.default=r},465:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),n(981);var i=n(851),a=n(698),s={floorTexture:"assets/img/floor.jpg",wallTexture:"assets/img/wall.jpg",spritesTexture:"assets/img/sprites.png"};!function(){r(this,void 0,void 0,(function(){var e,t,n;return o(this,(function(r){switch(r.label){case 0:return console.log("Loading assets..."),e=function(){var e,t=document.createElement("progress");return t.setAttribute("id","tgd-progress"),t.setAttribute("min","0"),t.setAttribute("max","100"),null===(e=document.getElementById("tgd-logo"))||void 0===e||e.appendChild(t),t}(),[4,(0,i.fetchAssets)(s,(function(t){e.setAttribute("value","".concat(100*t))}))];case 1:if(t=r.sent(),console.log("Assets loaded."),!(n=document.getElementById("canvas")))throw Error("Unable to find main Canvas!");return(0,a.startApplication)(n,t),function(){var e=document.getElementById("tgd-logo");if(!e)throw Error("There is no splash screen!");e.style.setProperty("--duration","".concat(900,"ms")),e.classList.add("vanish"),window.setTimeout((function(){document.body.removeChild(e)}),900)}(),[2]}}))}))}()},698:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.startApplication=void 0;var o=r(n(875)),i=r(n(6)),a=r(n(248)),s=n(594),u=r(n(199));t.startApplication=function(e,t){window.requestAnimationFrame((function(n){var r;r=t,(0,s.assertImage)(r.floorTexture,"data.floorTexture"),(0,s.assertImage)(r.wallTexture,"data.wallTexture"),(0,s.assertImage)(r.spritesTexture,"data.spritesTexture");var c=new o.default(e,{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,failIfMajorPerformanceCaveat:!0}),l=new u.default(n,c.gl,t.spritesTexture);l.eventGameOver.add((function(e){e.success,c.stop()})),c.setPainters([new a.default(c.gl,t.floorTexture),new i.default(c.gl,t.wallTexture),l]),c.play()}))}},966:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(242),s=i(n(384)),u=n(919),c=1-a.MARGIN,l=function(e){function t(n,r){var o=e.call(this,n)||this;o.texture=(0,u.createTextureFromImageRepeat)(n,r);var i=t.createDataArray(4);return t.pokeData(i,0,-c,1,0,0),t.pokeData(i,1,+c,1,1,0),t.pokeData(i,2,-c,-1,0,1),t.pokeData(i,3,+c,-1,1,1),o.pushDataArray(i),o}return o(t,e),t.prototype.anim=function(e){},t.prototype.actualPaint=function(e){var t=this.gl,n=t.canvas,r=n.width,o=n.height;t.disable(t.BLEND),t.disable(t.DEPTH_TEST),this.$uniTexture(this.texture),this.$uniScreen(r,o),this.$uniShrink(c),this.$uniSpeed(a.SPEED),this.$uniTime(e),t.drawArrays(t.TRIANGLE_STRIP,0,4)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t}(s.default);t.default=l},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(t){this.gl=t;var n=t.createBuffer();if(!n)throw Error("Unable to create WebGL Buffer!");var r=t.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var o=e.createShader(t,t.VERTEX_SHADER,e.VERT),i=e.createShader(t,t.FRAGMENT_SHADER,e.FRAG);t.attachShader(r,o),t.attachShader(r,i),t.linkProgram(r),this.prg=r,this.vertBuff=n}return e.prototype.destroy=function(){var e=this,t=e.gl,n=e.prg,r=e.vertBuff;t.deleteBuffer(r),t.deleteProgram(n),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(4*e)},e.pokeData=function(t,n,r,o,i,a){var s=n*e.ATTRIBS_COUNT;t[s++]=r,t[s++]=o,t[s++]=i,t[s++]=a},e.swapData=function(t,n,r){var o=n*e.ATTRIBS_COUNT,i=r*e.ATTRIBS_COUNT,a=0;a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a},e.prototype.pushDataArray=function(e){var t=this.gl,n=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},e.prototype.pushDataSubArray=function(t,n,r){var o=this.gl,i=this.vertBuff;o.bindBuffer(o.ARRAY_BUFFER,i);var a=e.ATTRIBS_COUNT,s=t.subarray(n*a,r*a);o.bufferSubData(o.ARRAY_BUFFER,n*Float32Array.BYTES_PER_ELEMENT*a,s)},e.prototype.$uniShrink=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniShrink");t.uniform1f(r,e)},e.prototype.$uniSpeed=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniSpeed");t.uniform1f(r,e)},e.prototype.$uniTime=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniTime");t.uniform1f(r,e)},e.prototype.$uniScreen=function(e,t){var n=this.gl,r=this.prg,o=n.getUniformLocation(r,"uniScreen");n.uniform2f(o,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(r,0)},e.prototype.paint=function(t){var n=this.gl,r=this.prg;n.useProgram(r);var o=Float32Array.BYTES_PER_ELEMENT,i=e.ATTRIBS_COUNT*o;n.bindBuffer(n.ARRAY_BUFFER,this.vertBuff),n.enableVertexAttribArray(0),n.vertexAttribPointer(0,2,n.FLOAT,!1,i,0*o),n.enableVertexAttribArray(1),n.vertexAttribPointer(1,2,n.FLOAT,!1,i,2*o),this.actualPaint(t)},e.createShader=function(e,t,n){var r,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,n),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(n),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(r=e.getShaderInfoLog(o))&&void 0!==r?r:"Unknow error while compiling the shader!");return o},e.VERT="// Time in msec\nuniform float uniTime;\n// Corridors width per msec\nuniform float uniSpeed;\n// Corridor width / screen width\nuniform float uniShrink;\n// Screen width and height\nuniform vec2 uniScreen;\n\n// The real position of the corridor\nattribute vec2 attPos;\n// (0,0), (1,0), (0,1), (1,1)\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    float w = uniScreen.x * uniShrink;\n    float h = uniScreen.y;\n    varUV = attUV * vec2(1.0, h / w);\n    varUV += vec2(0, uniTime * uniSpeed);\n    gl_Position = vec4( attPos.x, attPos.y, 1.0, 1.0 );\n}\n",e.FRAG="precision mediump float;\n\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec3 color = texture2D( uniTexture, varUV ).rgb;\n  gl_FragColor = vec4( color, 1.0 );\n}\n",e.ATTRIBS_COUNT=4,e}();t.default=n},248:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(966);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r(o).default}})},475:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(t){this.gl=t;var n=t.createBuffer();if(!n)throw Error("Unable to create WebGL Buffer!");var r=t.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var o=e.createShader(t,t.VERTEX_SHADER,e.VERT),i=e.createShader(t,t.FRAGMENT_SHADER,e.FRAG);t.attachShader(r,o),t.attachShader(r,i),t.linkProgram(r),this.prg=r,this.vertBuff=n}return e.prototype.destroy=function(){var e=this,t=e.gl,n=e.prg,r=e.vertBuff;t.deleteBuffer(r),t.deleteProgram(n),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(5*e)},e.pokeData=function(t,n,r,o,i,a,s){var u=n*e.ATTRIBS_COUNT;t[u++]=r,t[u++]=o,t[u++]=i,t[u++]=a,t[u++]=s},e.swapData=function(t,n,r){var o=n*e.ATTRIBS_COUNT,i=r*e.ATTRIBS_COUNT,a=0;a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a},e.prototype.pushDataArray=function(e){var t=this.gl,n=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.DYNAMIC_DRAW)},e.prototype.pushDataSubArray=function(t,n,r){var o=this.gl,i=this.vertBuff;o.bindBuffer(o.ARRAY_BUFFER,i);var a=e.ATTRIBS_COUNT,s=t.subarray(n*a,r*a);o.bufferSubData(o.ARRAY_BUFFER,n*Float32Array.BYTES_PER_ELEMENT*a,s)},e.prototype.$uniShrink=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniShrink");t.uniform1f(r,e)},e.prototype.$uniScreen=function(e,t){var n=this.gl,r=this.prg,o=n.getUniformLocation(r,"uniScreen");n.uniform2f(o,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(r,0)},e.prototype.paint=function(t){var n=this.gl,r=this.prg;n.useProgram(r);var o=Float32Array.BYTES_PER_ELEMENT,i=e.ATTRIBS_COUNT*o;n.bindBuffer(n.ARRAY_BUFFER,this.vertBuff),n.enableVertexAttribArray(0),n.vertexAttribPointer(0,2,n.FLOAT,!1,i,0*o),n.enableVertexAttribArray(1),n.vertexAttribPointer(1,1,n.FLOAT,!1,i,2*o),n.enableVertexAttribArray(2),n.vertexAttribPointer(2,2,n.FLOAT,!1,i,3*o),this.actualPaint(t)},e.createShader=function(e,t,n){var r,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,n),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(n),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(r=e.getShaderInfoLog(o))&&void 0!==r?r:"Unknow error while compiling the shader!");return o},e.VERT="// Screen width and height.\nuniform vec2 uniScreen;\n// Shrink factor of the corridor compared to the screen width.\nuniform float uniShrink;\n\nattribute vec2 attPos;\nattribute float attSize;\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    varUV = attUV;\n    float w = uniScreen.x * uniShrink;\n    float h = uniScreen.y;\n    gl_PointSize = attSize * w;\n    float ratio = w / h;\n    gl_Position = vec4( \n        attPos.x * uniShrink, \n        attPos.y * 2.0 * ratio + 1.0 - ratio * 0.75, \n        1.0, 1.0 \n    );\n}",e.FRAG="precision mediump float;\n\n// Atlas of 8x8 sprites.\nuniform sampler2D uniTexture;\n\n// Size of a a side of a square tile in the sprites' atlas.\nconst float TILE = 1.0 / 4.0;\n\nvarying vec2 varUV;\n\nvoid main() {\n  gl_FragColor = texture2D( uniTexture, varUV + TILE * gl_PointCoord );\n}",e.ATTRIBS_COUNT=5,e}();t.default=n},1:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(502);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r(o).default}})},502:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(242),u=n(919),c=a(n(475)),l=1-s.MARGIN,f=function(e){function t(n,r,o){var i=e.call(this,n)||this;return i.sprites=o,i.texture=(0,u.createTextureFromImage)(n,r),i.data=t.createDataArray(o.length),i.updateData(),i}return o(t,e),t.prototype.anim=function(e){this.updateData()},t.prototype.actualPaint=function(e){var t=this.gl,n=t.canvas,r=n.width,o=n.height;t.disable(t.DEPTH_TEST),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),this.$uniTexture(this.texture),this.$uniShrink(l),this.$uniScreen(r,o),t.drawArrays(t.POINTS,0,this.sprites.length)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t.prototype.updateData=function(){var e,n,r=this.data,o=0;try{for(var a=i(this.sprites),s=a.next();!s.done;s=a.next()){var u=s.value;t.pokeData(r,o++,u.x,u.y,u.size,.25*u.col,.25*u.row)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}this.pushDataArray(r)},t}(c.default);t.default=f},480:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(t){this.gl=t;var n=t.createBuffer();if(!n)throw Error("Unable to create WebGL Buffer!");var r=t.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var o=e.createShader(t,t.VERTEX_SHADER,e.VERT),i=e.createShader(t,t.FRAGMENT_SHADER,e.FRAG);t.attachShader(r,o),t.attachShader(r,i),t.linkProgram(r),this.prg=r,this.vertBuff=n}return e.prototype.destroy=function(){var e=this,t=e.gl,n=e.prg,r=e.vertBuff;t.deleteBuffer(r),t.deleteProgram(n),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(5*e)},e.pokeData=function(t,n,r,o,i,a,s){var u=n*e.ATTRIBS_COUNT;t[u++]=r,t[u++]=o,t[u++]=i,t[u++]=a,t[u++]=s},e.swapData=function(t,n,r){var o=n*e.ATTRIBS_COUNT,i=r*e.ATTRIBS_COUNT,a=0;a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a,a=t[o],t[o++]=t[i],t[i++]=a},e.prototype.pushDataArray=function(e){var t=this.gl,n=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},e.prototype.pushDataSubArray=function(t,n,r){var o=this.gl,i=this.vertBuff;o.bindBuffer(o.ARRAY_BUFFER,i);var a=e.ATTRIBS_COUNT,s=t.subarray(n*a,r*a);o.bufferSubData(o.ARRAY_BUFFER,n*Float32Array.BYTES_PER_ELEMENT*a,s)},e.prototype.$uniShrink=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniShrink");t.uniform1f(r,e)},e.prototype.$uniSpeed=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniSpeed");t.uniform1f(r,e)},e.prototype.$uniTime=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniTime");t.uniform1f(r,e)},e.prototype.$uniScreen=function(e,t){var n=this.gl,r=this.prg,o=n.getUniformLocation(r,"uniScreen");n.uniform2f(o,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,n=this.prg,r=t.getUniformLocation(n,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(r,0)},e.prototype.paint=function(t){var n=this.gl,r=this.prg;n.useProgram(r);var o=Float32Array.BYTES_PER_ELEMENT,i=e.ATTRIBS_COUNT*o;n.bindBuffer(n.ARRAY_BUFFER,this.vertBuff),n.enableVertexAttribArray(0),n.vertexAttribPointer(0,3,n.FLOAT,!1,i,0*o),n.enableVertexAttribArray(1),n.vertexAttribPointer(1,2,n.FLOAT,!1,i,3*o),this.actualPaint(t)},e.createShader=function(e,t,n){var r,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,n),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(n),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(r=e.getShaderInfoLog(o))&&void 0!==r?r:"Unknow error while compiling the shader!");return o},e.VERT="uniform float uniTime;\n// Texture tiles per msec\nuniform float uniSpeed;\n// uniShrink = 1.0 - MARGIN\nuniform float uniShrink;\n// Screen width and height\nuniform vec2 uniScreen;\n\n// x, y, W\nattribute vec3 attPos;\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    float width = uniScreen.x * (1.0 - uniShrink);\n    float height = uniScreen.y;\n    varUV = attUV * vec2(height / width, 0.5);\n    varUV.x -= uniTime * uniSpeed;\n    float x = attPos.x;\n    float y = attPos.y;\n    float w = attPos.z;\n    gl_Position = vec4( x, y, 1.0, w );\n}",e.FRAG="precision mediump float;\n\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec3 color = texture2D( uniTexture, varUV ).rgb;\n  gl_FragColor = vec4( color, 1.0 );\n}\n",e.ATTRIBS_COUNT=5,e}();t.default=n},6:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(709);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r(o).default}})},709:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(242),s=i(n(480)),u=n(919),c=1-a.MARGIN,l=function(e){function t(n,r){var o=e.call(this,n)||this;o.texture=(0,u.createTextureFromImageRepeat)(n,r);var i=t.createDataArray(12),s=1.2,l=1.2*c,f=1.2,d=0;return t.pokeData(i,d++,-1,1.2,1,1,0),t.pokeData(i,d++,-l,1.2,s,1,1),t.pokeData(i,d++,-1,-f,1,0,0),t.pokeData(i,d++,-l,1.2,s,1,1),t.pokeData(i,d++,-1,-f,1,0,0),t.pokeData(i,d++,-l,-1.2,s,0,1),t.pokeData(i,d++,1,1.2,1,1,0),t.pokeData(i,d++,l,1.2,s,1,1),t.pokeData(i,d++,1,-f,1,0,0),t.pokeData(i,d++,l,1.2,s,1,1),t.pokeData(i,d++,1,-f,1,0,0),t.pokeData(i,d++,l,-1.2,s,0,1),o.pushDataArray(i),o.speed=a.SPEED*(1-a.MARGIN)/a.MARGIN,o}return o(t,e),t.prototype.anim=function(e){},t.prototype.actualPaint=function(e){var t=this.gl,n=t.canvas,r=n.width,o=n.height;t.disable(t.BLEND),t.disable(t.DEPTH_TEST),this.$uniTexture(this.texture),this.$uniScreen(r,o),this.$uniShrink(c),this.$uniSpeed(this.speed),this.$uniTime(e),t.drawArrays(t.TRIANGLES,0,12)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t}(s.default);t.default=l},937:function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var i=n(242),a=n(489),s=function(e){var t,n,r=[],i="1".charCodeAt(0),s=!1;try{for(var u=o("\n33454321233351\n".split("")),c=u.next();!c.done;c=u.next()){var l=c.value;l<=" "||("+"===l?s=!0:(r.push({bonus:s,column:(l.charCodeAt(0)-i)%5,speed:5e-4*(0,a.rand)(1,3)}),s=!1))}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return console.log("🚀 [mission-factory] missions = ",r),r}();t.default=function(e){var t=this;this.context=e,this.prevMissionTime=0,this.index=0,this.deltaTime=i.START_DELTA_TIME,this.getNextMission=function(e){t.prevMissionTime+=t.deltaTime,t.deltaTime=Math.max(200,t.deltaTime-i.DECREASE_DELTAT_TIME);var n=s[t.index];return t.index=(t.index+1)%s.length,r(r({},n),{time:t.prevMissionTime-e})},this.prevMissionTime=e.time+2e3}},199:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(242),u=a(n(948)),c=a(n(632)),l=a(n(1)),f=a(n(937)),d=a(n(65)),h=n(794),p=function(){function e(e,t,n){this.gl=t,this.eventGameOver=new d.default,this.mice=[],this.score=0,this.lives=3,this.lastTime=0,this.lastTime=e,this.missionsFactory=new f.default(this);var i=new u.default;this.cat=i;for(var a=0;a<s.MOUSE_COUNT;a++)this.mice.push(new c.default(this));window.document.addEventListener("keydown",i.onKeyDown,!0),t.canvas.addEventListener("pointerdown",i.onPointerMove),t.canvas.addEventListener("pointermove",i.onPointerMove);var p=new l.default(t,n,o(o([],r(this.mice),!1),[i],!1));this.painter=p,(0,h.printScore)(0),(0,h.printLives)(this.lives)}return Object.defineProperty(e.prototype,"time",{get:function(){return this.lastTime},enumerable:!1,configurable:!0}),e.prototype.fireCongrats=function(){this.eventGameOver.fire({success:!0})},e.prototype.fireExtraLife=function(){(0,h.printLives)(++this.lives),(0,h.printWarning)("Extra life",500)},e.prototype.fireMouseEscaped=function(e){var t=this;if(!(this.lives<=0)){var n=--this.lives;(0,h.printLives)(n),n>0?(0,h.printWarning)("A mouse escaped!",500):((0,h.printWarning)("Game Over",3e3),window.setTimeout((function(){t.eventGameOver.fire({success:!1})}),3e3))}},e.prototype.fireMouseNearCat=function(e){(0,h.printScore)(++this.score),e.getColumn()===this.cat.getColumn()&&(e.mission.bonus&&this.fireExtraLife(),e.swallowed(),this.cat.miam())},e.prototype.getNextMission=function(){return this.missionsFactory.getNextMission(this.lastTime)},e.prototype.paint=function(e){this.painter.paint(e)},e.prototype.anim=function(e){var t,n;if(this.lastTime>0){var r=e-this.lastTime;this.cat.anim(e,r);try{for(var o=i(this.mice),a=o.next();!a.done;a=o.next())a.value.anim(e,r)}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}this.painter.anim(e)}this.lastTime=e},e.prototype.destroy=function(){this.gl.canvas.addEventListener("pointerdown",this.cat.onPointerMove),this.gl.canvas.addEventListener("pointermove",this.cat.onPointerMove),window.document.removeEventListener("keydown",this.cat.onKeyDown,!0)},e}();t.default=p},489:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=t.rand=void 0,t.rand=function(e,t){return e+(t-e)*Math.random()},t.clamp=function(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.999999),e<t?t:e>n?n:e}},794:(e,t)=>{function n(e){var t=document.getElementById(e);if(!t)throw Error('No HTML element with ID "'.concat(e,'"!'));return t}Object.defineProperty(t,"__esModule",{value:!0}),t.printWarning=t.printLives=t.printScore=void 0,t.printScore=function(e){n("score-value").textContent="".concat(e)},t.printLives=function(e){n("lives-value").textContent="".concat(e)},t.printWarning=function(e,t){void 0===t&&(t=2e3);var r=n("message-warning");r.classList.remove("hide"),r.textContent=e,window.setTimeout((function(){r.classList.add("hide")}),t)}},594:(e,t)=>{function n(e){return!Array.isArray(e)&&"object"==typeof e}function r(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.assertImage=t.assertString=t.isString=t.assertObject=t.isObject=void 0,t.isObject=n,t.assertObject=function(e,t){if(void 0===t&&(t="data"),!n(e))throw Error("".concat(t," was expected to be an object but we got ").concat(typeof e,"!"))},t.isString=r,t.assertString=function(e,t){if(void 0===t&&(t="data"),!r(e))throw Error("".concat(t," was expected to be a string but we got ").concat(typeof e,"!"))},t.assertImage=function(e,t){if(void 0===t&&(t="data"),!(e instanceof HTMLImageElement))throw Error("".concat(t," was expected to be an Image but we got ").concat(typeof e,"!"))}},875:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(319);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r(o).default}})},319:function(e,t){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){var r=this;this.canvas=e,this.painters=[],this.playing=!1,this.lastCanvasWidth=0,this.lastCanvasheight=0,this.paint=function(e){var t,o,i=r.gl,a=i.canvas,s=a.clientWidth,u=a.clientHeight;s===r.lastCanvasWidth&&u===r.lastCanvasheight||(r.lastCanvasWidth=s,r.lastCanvasheight=u,a.setAttribute("width","".concat(s)),a.setAttribute("height","".concat(u)),i.viewport(0,0,s,u));try{for(var c=n(r.painters),l=c.next();!l.done;l=c.next())l.value.paint(e)}catch(e){t={error:e}}finally{try{l&&!l.done&&(o=c.return)&&o.call(c)}finally{if(t)throw t.error}}},this.anim=function(e){var t,o;try{for(var i=n(r.painters),a=i.next();!a.done;a=i.next())a.value.anim(e)}catch(e){t={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}};var o=e.getContext("webgl");if(!o)throw Error("Unable to create WebGL Context!");this.gl=o}return e.prototype.setPainters=function(e){this.painters=e},e.prototype.play=function(){var e=this;if(!this.playing){this.playing=!0;var t=function(n){e.paint(n),e.anim(n),e.playing&&window.requestAnimationFrame(t)};window.requestAnimationFrame(t)}},e.prototype.stop=function(){this.playing=!1},e.prototype.resize=function(e,t){var n=this;window.requestAnimationFrame((function(){var r=n,o=r.gl,i=r.canvas;i.setAttribute("width","".concat(e)),i.setAttribute("height","".concat(t)),o.viewport(0,0,e,t)}))},e}();t.default=r},919:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(910),t)},910:(e,t)=>{function n(e){var t=e.createTexture();if(!t)throw Error("Unable to create WebGL texture!");return t}Object.defineProperty(t,"__esModule",{value:!0}),t.textureRepeatVertical=t.textureRepeatHorizontal=t.textureRepeat=t.textureClampToEdgeVertical=t.textureClampToEdgeHorizontal=t.textureClampToEdge=t.createTextureFromImageRepeat=t.createTextureFromImage=t.createTexture=void 0,t.createTexture=n,t.createTextureFromImage=function(e,t){var r=n(e);return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),r},t.createTextureFromImageRepeat=function(e,t){var r=n(e);return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),r},t.textureClampToEdge=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureClampToEdgeHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)},t.textureClampToEdgeVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureRepeat=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)},t.textureRepeatHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT)},t.textureRepeatVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)}}},e=>{e(e.s=465)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
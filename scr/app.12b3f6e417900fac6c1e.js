"use strict";(self.webpackChunkagathe_2022=self.webpackChunkagathe_2022||[]).push([[143],{424:(e,t,r)=>{r.d(t,{Z:()=>u});var n=r(537),a=r.n(n),o=r(645),i=r.n(o)()(a());i.push([e.id,"body,\nhtml {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem .5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 .5rem .5rem #ff8e;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,+BAA+B;IAC/B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,YAAY;IACZ,mBAAmB;IACnB,wBAAwB;IACxB,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;IAC1B,2BAA2B;IAC3B,iCAAiC;IACjC,gCAAgC;AACpC;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,cAAc;IACd;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;IAC3E,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;AAC/E;;AAEA;IACI,kDAAkD;IAClD,qBAAqB;IACrB,iDAAiD;IACjD;;;;;;;;;;;;;;;;;;;SAmBK;AACT;;AAEA;IACI;;;;;;;;;;;;;;;;;;;SAmBK;IACL,kDAAkD;IAClD,qBAAqB;IACrB,iCAAiC;AACrC",sourcesContent:["body,\nhtml {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem .5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 .5rem .5rem #ff8e;\n}\n"],sourceRoot:""}]);const u=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);n&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},981:(e,t,r)=>{r.r(t),r.d(t,{default:()=>m});var n=r(379),a=r.n(n),o=r(795),i=r.n(o),u=r(569),s=r.n(u),c=r(565),l=r.n(c),f=r(216),d=r.n(f),p=r(589),h=r.n(p),v=r(424),A={};A.styleTagTransform=h(),A.setAttributes=l(),A.insert=s().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=d(),a()(v.Z,A);const m=v.Z&&v.Z.locals?v.Z.locals:void 0},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},i=[],u=0;u<e.length;u++){var s=e[u],c=n.base?s[0]+n.base:s[0],l=o[c]||0,f="".concat(c," ").concat(l);o[c]=l+1;var d=r(f),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,n);n.byIndex=u,t.splice(u,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var u=r(o[i]);t[u].references--}for(var s=n(e,a),c=0;c<o.length;c++){var l=r(o[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},957:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(242),a=r(489),o=function(){function e(){var e=this;this.col=0,this.row=0,this.x=0,this.y=0,this.size=1/n.COLUMNS,this.target=0,this.onPointerMove=function(t){var r=t.target.clientWidth,o=(0,a.clamp)(t.clientX/r);e.target=2*(Math.floor(n.COLUMNS*o)+.5)/n.COLUMNS-1}}return e.prototype.anim=function(e){var t=.008*e;this.target<this.x?this.x=Math.max(this.target,this.x-t):this.x=Math.min(this.target,this.x+t)},e}();t.default=o},632:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(242),a=r(489),o=(n.SPEED,Math.abs(1.2)),i=function(){function e(e,t){this.col=0,this.row=1,this.x=u((0,a.rand)(0,1)),this.y=0,this.size=1/n.COLUMNS,this.speed=1,this.y=o*e/t-1}return e.prototype.anim=function(e){var t=n.SPEED*this.speed*e;this.y+=t,this.y>.2&&(this.y=-1+this.y-.2,this.x=u((0,a.rand)(0,1)))},e}();function u(e){return 2*(Math.floor(n.COLUMNS*e)+.5)/n.COLUMNS-1}t.default=i},851:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchAsset=t.fetchAssets=void 0,t.fetchAssets=function(e,t){return r(this,void 0,void 0,(function(){var r,o,u,s,c,l,f,d,p,h;return n(this,(function(n){switch(n.label){case 0:r={},t(0),o=Object.keys(e),u=0,n.label=1;case 1:n.trys.push([1,6,7,8]),s=a(o),c=s.next(),n.label=2;case 2:return c.done?[3,5]:(l=c.value,u++,t(u/o.length),[4,i(e[l])]);case 3:(f=n.sent())&&(r[l]=f),n.label=4;case 4:return c=s.next(),[3,2];case 5:return[3,8];case 6:return d=n.sent(),p={error:d},[3,8];case 7:try{c&&!c.done&&(h=s.return)&&h.call(s)}finally{if(p)throw p.error}return[7];case 8:return t(1),[2,r]}}))}))};var o=new Set;function i(e){return r(this,void 0,void 0,(function(){var t=this;return n(this,(function(a){return[2,new Promise((function(a){return r(t,void 0,void 0,(function(){var t,r,i,s,c;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,5,,6]),u(e,"jpg","png","gif","svg")?((t=new Image).crossOrigin="anonymous",t.onload=function(){return a(t)},t.onerror=function(t){console.error('Unable to load image "'+e+'":',e),console.error(t),a(void 0)},t.src=e,[3,4]):[3,1];case 1:return u(e,"ogg","wav","mp3")?(r=document.createElement("audio"),i=function(){o.has(r)||(o.add(r),a(r))},r.addEventListener("canplay",i),r.addEventListener("loadeddata",i),window.setTimeout(i,3e3),r.addEventListener("error",(function(t){console.error('Unable to load sound "'+e+'":',e),console.error(t),a(void 0)})),r.src=e,console.log("Loading audio: ",e),[3,4]):[3,2];case 2:return[4,fetch(e)];case 3:s=n.sent(),a(u(e,"json")?s.json():s.text()),n.label=4;case 4:return[3,6];case 5:return c=n.sent(),console.error('Unable to load "'.concat(e,'"!'),c),a(void 0),[3,6];case 6:return[2]}}))}))}))]}))}))}function u(e){for(var t,r,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];try{for(var i=a(n),u=i.next();!u.done;u=i.next()){var s=u.value;if(e.endsWith(".".concat(s)))return!0}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return!1}t.fetchAsset=i},242:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MOUSE_COUNT=t.SPEED=t.MARGIN=t.COLUMNS=void 0,t.COLUMNS=5,t.MARGIN=.15,t.SPEED=3e-4,t.MOUSE_COUNT=5},465:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),r(981);var o=r(851),i=r(698),u={floorTexture:"assets/img/floor.jpg",wallTexture:"assets/img/wall.jpg",spritesTexture:"assets/img/sprites.png"};!function(){n(this,void 0,void 0,(function(){var e,t,r;return a(this,(function(n){switch(n.label){case 0:return console.log("Loading assets..."),e=function(){var e,t=document.createElement("progress");return t.setAttribute("id","tgd-progress"),t.setAttribute("min","0"),t.setAttribute("max","100"),null===(e=document.getElementById("tgd-logo"))||void 0===e||e.appendChild(t),t}(),[4,(0,o.fetchAssets)(u,(function(t){e.setAttribute("value","".concat(100*t))}))];case 1:if(t=n.sent(),console.log("Assets loaded."),!(r=document.getElementById("canvas")))throw Error("Unable to find main Canvas!");return(0,i.startApplication)(r,t),function(){var e=document.getElementById("tgd-logo");if(!e)throw Error("There is no splash screen!");e.style.setProperty("--duration","".concat(900,"ms")),e.classList.add("vanish"),window.setTimeout((function(){document.body.removeChild(e)}),900)}(),[2]}}))}))}()},698:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.startApplication=void 0;var a=n(r(875)),o=n(r(6)),i=n(r(248)),u=r(594),s=n(r(948));t.startApplication=function(e,t){var r;r=t,(0,u.assertImage)(r.floorTexture,"data.floorTexture"),(0,u.assertImage)(r.wallTexture,"data.wallTexture"),(0,u.assertImage)(r.spritesTexture,"data.spritesTexture");var n=new a.default(e),c=new s.default(n.gl,t.spritesTexture);n.setPainters([new i.default(n.gl,t.floorTexture),new o.default(n.gl,t.wallTexture),c]),n.play()}},966:function(e,t,r){var n,a=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(242),u=o(r(384)),s=r(919),c=1-i.MARGIN,l=function(e){function t(r,n){var a=e.call(this,r)||this;a.texture=(0,s.createTextureFromImageRepeat)(r,n);var o=t.createDataArray(4);return t.pokeData(o,0,-c,1,0,0),t.pokeData(o,1,+c,1,1,0),t.pokeData(o,2,-c,-1,0,1),t.pokeData(o,3,+c,-1,1,1),a.pushDataArray(o),a}return a(t,e),t.prototype.anim=function(e){},t.prototype.actualPaint=function(e){var t=this.gl,r=t.canvas,n=r.width,a=r.height;t.disable(t.BLEND),t.disable(t.DEPTH_TEST),this.$uniTexture(this.texture),this.$uniScreen(n,a),this.$uniShrink(c),this.$uniSpeed(i.SPEED),this.$uniTime(e),t.drawArrays(t.TRIANGLE_STRIP,0,4)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t}(u.default);t.default=l},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t){this.gl=t;var r=t.createBuffer();if(!r)throw Error("Unable to create WebGL Buffer!");var n=t.createProgram();if(!n)throw Error("Unable to create a WebGL Program!");var a=e.createShader(t,t.VERTEX_SHADER,e.VERT),o=e.createShader(t,t.FRAGMENT_SHADER,e.FRAG);t.attachShader(n,a),t.attachShader(n,o),t.linkProgram(n),this.prg=n,this.vertBuff=r}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(4*e)},e.pokeData=function(t,r,n,a,o,i){var u=r*e.ATTRIBS_COUNT;t[u++]=n,t[u++]=a,t[u++]=o,t[u++]=i},e.swapData=function(t,r,n){var a=r*e.ATTRIBS_COUNT,o=n*e.ATTRIBS_COUNT,i=0;i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i},e.prototype.pushDataArray=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},e.prototype.pushDataSubArray=function(t,r,n){var a=this.gl,o=this.vertBuff;a.bindBuffer(a.ARRAY_BUFFER,o);var i=e.ATTRIBS_COUNT,u=t.subarray(r*i,n*i);a.bufferSubData(a.ARRAY_BUFFER,r*Float32Array.BYTES_PER_ELEMENT*i,u)},e.prototype.$uniShrink=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniShrink");t.uniform1f(n,e)},e.prototype.$uniSpeed=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniSpeed");t.uniform1f(n,e)},e.prototype.$uniTime=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTime");t.uniform1f(n,e)},e.prototype.$uniScreen=function(e,t){var r=this.gl,n=this.prg,a=r.getUniformLocation(n,"uniScreen");r.uniform2f(a,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},e.prototype.paint=function(t){var r=this.gl,n=this.prg;r.useProgram(n);var a=Float32Array.BYTES_PER_ELEMENT,o=e.ATTRIBS_COUNT*a;r.bindBuffer(r.ARRAY_BUFFER,this.vertBuff),r.enableVertexAttribArray(0),r.vertexAttribPointer(0,2,r.FLOAT,!1,o,0*a),r.enableVertexAttribArray(1),r.vertexAttribPointer(1,2,r.FLOAT,!1,o,2*a),this.actualPaint(t)},e.createShader=function(e,t,r){var n,a=e.createShader(t);if(!a)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(a)),Error(null!==(n=e.getShaderInfoLog(a))&&void 0!==n?n:"Unknow error while compiling the shader!");return a},e.VERT="// Time in msec\nuniform float uniTime;\n// Corridors width per msec\nuniform float uniSpeed;\n// Corridor width / screen width\nuniform float uniShrink;\n// Screen width and height\nuniform vec2 uniScreen;\n\n// The real position of the corridor\nattribute vec2 attPos;\n// (0,0), (1,0), (0,1), (1,1)\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    float w = uniScreen.x * uniShrink;\n    float h = uniScreen.y;\n    varUV = attUV * vec2(1.0, h / w);\n    varUV += vec2(0, uniTime * uniSpeed);\n    gl_Position = vec4( attPos.x, attPos.y, 1.0, 1.0 );\n}\n",e.FRAG="precision mediump float;\n\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec3 color = texture2D( uniTexture, varUV ).rgb;\n  gl_FragColor = vec4( color, 1.0 );\n}\n",e.ATTRIBS_COUNT=4,e}();t.default=r},248:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(966);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(a).default}})},475:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t){this.gl=t;var r=t.createBuffer();if(!r)throw Error("Unable to create WebGL Buffer!");var n=t.createProgram();if(!n)throw Error("Unable to create a WebGL Program!");var a=e.createShader(t,t.VERTEX_SHADER,e.VERT),o=e.createShader(t,t.FRAGMENT_SHADER,e.FRAG);t.attachShader(n,a),t.attachShader(n,o),t.linkProgram(n),this.prg=n,this.vertBuff=r}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(5*e)},e.pokeData=function(t,r,n,a,o,i,u){var s=r*e.ATTRIBS_COUNT;t[s++]=n,t[s++]=a,t[s++]=o,t[s++]=i,t[s++]=u},e.swapData=function(t,r,n){var a=r*e.ATTRIBS_COUNT,o=n*e.ATTRIBS_COUNT,i=0;i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i},e.prototype.pushDataArray=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.DYNAMIC_DRAW)},e.prototype.pushDataSubArray=function(t,r,n){var a=this.gl,o=this.vertBuff;a.bindBuffer(a.ARRAY_BUFFER,o);var i=e.ATTRIBS_COUNT,u=t.subarray(r*i,n*i);a.bufferSubData(a.ARRAY_BUFFER,r*Float32Array.BYTES_PER_ELEMENT*i,u)},e.prototype.$uniShrink=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniShrink");t.uniform1f(n,e)},e.prototype.$uniScreen=function(e,t){var r=this.gl,n=this.prg,a=r.getUniformLocation(n,"uniScreen");r.uniform2f(a,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},e.prototype.paint=function(t){var r=this.gl,n=this.prg;r.useProgram(n);var a=Float32Array.BYTES_PER_ELEMENT,o=e.ATTRIBS_COUNT*a;r.bindBuffer(r.ARRAY_BUFFER,this.vertBuff),r.enableVertexAttribArray(0),r.vertexAttribPointer(0,2,r.FLOAT,!1,o,0*a),r.enableVertexAttribArray(1),r.vertexAttribPointer(1,1,r.FLOAT,!1,o,2*a),r.enableVertexAttribArray(2),r.vertexAttribPointer(2,2,r.FLOAT,!1,o,3*a),this.actualPaint(t)},e.createShader=function(e,t,r){var n,a=e.createShader(t);if(!a)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(a)),Error(null!==(n=e.getShaderInfoLog(a))&&void 0!==n?n:"Unknow error while compiling the shader!");return a},e.VERT="// Screen width and height.\nuniform vec2 uniScreen;\n// Shrink factor of the corridor compared to the screen width.\nuniform float uniShrink;\n\nattribute vec2 attPos;\nattribute float attSize;\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    varUV = attUV;\n    float w = uniScreen.x * uniShrink;\n    float h = uniScreen.y;\n    gl_PointSize = attSize * w;\n    gl_Position = vec4( \n        attPos.x * uniShrink, \n        0.8 + attPos.y * h / w, 1.0, 1.0 \n    );\n}\n",e.FRAG="precision mediump float;\n\n// Atlas of 8x8 sprites.\nuniform sampler2D uniTexture;\n\n// Size of a a side of a square tile in the sprites' atlas.\nconst float TILE = 1.0 / 8.0;\n\nvarying vec2 varUV;\n\nvoid main() {\n  gl_FragColor = texture2D( uniTexture, varUV + TILE * gl_PointCoord );\n}\n",e.ATTRIBS_COUNT=5,e}();t.default=r},1:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(502);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(a).default}})},502:function(e,t,r){var n,a=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=r(242),s=r(919),c=i(r(475)),l=1-u.MARGIN,f=function(e){function t(r,n,a){var o=e.call(this,r)||this;return o.sprites=a,o.texture=(0,s.createTextureFromImage)(r,n),o.data=t.createDataArray(a.length),o.updateData(),o}return a(t,e),t.prototype.anim=function(e){this.updateData()},t.prototype.actualPaint=function(e){var t=this.gl,r=t.canvas,n=r.width,a=r.height;t.disable(t.DEPTH_TEST),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),this.$uniTexture(this.texture),this.$uniShrink(l),this.$uniScreen(n,a),t.drawArrays(t.POINTS,0,this.sprites.length)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t.prototype.updateData=function(){var e,r,n=this.data,a=0;try{for(var i=o(this.sprites),u=i.next();!u.done;u=i.next()){var s=u.value;t.pokeData(n,a++,s.x,s.y,s.size,.125*s.col,.125*s.row)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}this.pushDataArray(n)},t}(c.default);t.default=f},480:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t){this.gl=t;var r=t.createBuffer();if(!r)throw Error("Unable to create WebGL Buffer!");var n=t.createProgram();if(!n)throw Error("Unable to create a WebGL Program!");var a=e.createShader(t,t.VERTEX_SHADER,e.VERT),o=e.createShader(t,t.FRAGMENT_SHADER,e.FRAG);t.attachShader(n,a),t.attachShader(n,o),t.linkProgram(n),this.prg=n,this.vertBuff=r}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(5*e)},e.pokeData=function(t,r,n,a,o,i,u){var s=r*e.ATTRIBS_COUNT;t[s++]=n,t[s++]=a,t[s++]=o,t[s++]=i,t[s++]=u},e.swapData=function(t,r,n){var a=r*e.ATTRIBS_COUNT,o=n*e.ATTRIBS_COUNT,i=0;i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i,i=t[a],t[a++]=t[o],t[o++]=i},e.prototype.pushDataArray=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},e.prototype.pushDataSubArray=function(t,r,n){var a=this.gl,o=this.vertBuff;a.bindBuffer(a.ARRAY_BUFFER,o);var i=e.ATTRIBS_COUNT,u=t.subarray(r*i,n*i);a.bufferSubData(a.ARRAY_BUFFER,r*Float32Array.BYTES_PER_ELEMENT*i,u)},e.prototype.$uniShrink=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniShrink");t.uniform1f(n,e)},e.prototype.$uniSpeed=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniSpeed");t.uniform1f(n,e)},e.prototype.$uniTime=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTime");t.uniform1f(n,e)},e.prototype.$uniScreen=function(e,t){var r=this.gl,n=this.prg,a=r.getUniformLocation(n,"uniScreen");r.uniform2f(a,e,t)},e.prototype.$uniTexture=function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},e.prototype.paint=function(t){var r=this.gl,n=this.prg;r.useProgram(n);var a=Float32Array.BYTES_PER_ELEMENT,o=e.ATTRIBS_COUNT*a;r.bindBuffer(r.ARRAY_BUFFER,this.vertBuff),r.enableVertexAttribArray(0),r.vertexAttribPointer(0,3,r.FLOAT,!1,o,0*a),r.enableVertexAttribArray(1),r.vertexAttribPointer(1,2,r.FLOAT,!1,o,3*a),this.actualPaint(t)},e.createShader=function(e,t,r){var n,a=e.createShader(t);if(!a)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(a)),Error(null!==(n=e.getShaderInfoLog(a))&&void 0!==n?n:"Unknow error while compiling the shader!");return a},e.VERT="uniform float uniTime;\n// Texture tiles per msec\nuniform float uniSpeed;\n// uniShrink = 1.0 - MARGIN\nuniform float uniShrink;\n// Screen width and height\nuniform vec2 uniScreen;\n\n// x, y, W\nattribute vec3 attPos;\nattribute vec2 attUV;\n\nvarying vec2 varUV;\n\nvoid main() {\n    float width = uniScreen.x * (1.0 - uniShrink);\n    float height = uniScreen.y;\n    varUV = attUV * vec2(height / width, 0.5);\n    varUV.x -= uniTime * uniSpeed;\n    float x = attPos.x;\n    float y = attPos.y;\n    float w = attPos.z;\n    gl_Position = vec4( x, y, 1.0, w );\n}",e.FRAG="precision mediump float;\n\nuniform sampler2D uniTexture;\nvarying vec2 varUV;\n\nvoid main() {\n  vec3 color = texture2D( uniTexture, varUV ).rgb;\n  gl_FragColor = vec4( color, 1.0 );\n}\n",e.ATTRIBS_COUNT=5,e}();t.default=r},6:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(709);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(a).default}})},709:function(e,t,r){var n,a=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(242),u=o(r(480)),s=r(919),c=1-i.MARGIN,l=function(e){function t(r,n){var a=e.call(this,r)||this;a.texture=(0,s.createTextureFromImageRepeat)(r,n);var o=t.createDataArray(12),u=1.2,l=1.2*c,f=1.2,d=0;t.pokeData(o,d++,-1,1.2,1,1,0),t.pokeData(o,d++,-l,1.2,u,1,1),t.pokeData(o,d++,-1,-f,1,0,0),t.pokeData(o,d++,-l,1.2,u,1,1),t.pokeData(o,d++,-1,-f,1,0,0),t.pokeData(o,d++,-l,-1.2,u,0,1),t.pokeData(o,d++,1,1.2,1,1,0),t.pokeData(o,d++,l,1.2,u,1,1),t.pokeData(o,d++,1,-f,1,0,0),t.pokeData(o,d++,l,1.2,u,1,1),t.pokeData(o,d++,1,-f,1,0,0),t.pokeData(o,d++,l,-1.2,u,0,1),a.pushDataArray(o);for(var p=0;p<4;p++)console.log(o.subarray(5*p,5*(p+1)));return a.speed=i.SPEED*(1-i.MARGIN)/i.MARGIN,a}return a(t,e),t.prototype.anim=function(e){},t.prototype.actualPaint=function(e){var t=this.gl,r=t.canvas,n=r.width,a=r.height;t.disable(t.BLEND),t.disable(t.DEPTH_TEST),this.$uniTexture(this.texture),this.$uniScreen(n,a),this.$uniShrink(c),this.$uniSpeed(this.speed),this.$uniTime(e),t.drawArrays(t.TRIANGLES,0,12)},t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t}(u.default);t.default=l},948:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,a=0,o=t.length;a<o;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=r(242),s=i(r(957)),c=i(r(632)),l=i(r(1)),f=function(){function e(e,t){this.gl=e,this.mice=[],this.lastTime=0;var r=new s.default;this.cat=r;for(var o=0;o<u.MOUSE_COUNT;o++)this.mice.push(new c.default(o,u.MOUSE_COUNT));e.canvas.addEventListener("pointerdown",r.onPointerMove),e.canvas.addEventListener("pointermove",r.onPointerMove);var i=new l.default(e,t,a(a([],n(this.mice),!1),[r],!1));this.painter=i}return e.prototype.paint=function(e){this.painter.paint(e)},e.prototype.anim=function(e){var t,r;if(this.lastTime>0){var n=e-this.lastTime;this.cat.anim(n);try{for(var a=o(this.mice),i=a.next();!i.done;i=a.next())i.value.anim(n)}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}this.painter.anim(e)}this.lastTime=e},e.prototype.destroy=function(){this.gl.canvas.addEventListener("pointerdown",this.cat.onPointerMove),this.gl.canvas.addEventListener("pointermove",this.cat.onPointerMove)},e}();t.default=f},489:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=t.rand=void 0,t.rand=function(e,t){return e+(t-e)*Math.random()},t.clamp=function(e,t,r){return void 0===t&&(t=0),void 0===r&&(r=.999999),e<t?t:e>r?r:e}},594:(e,t)=>{function r(e){return!Array.isArray(e)&&"object"==typeof e}function n(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.assertImage=t.assertString=t.isString=t.assertObject=t.isObject=void 0,t.isObject=r,t.assertObject=function(e,t){if(void 0===t&&(t="data"),!r(e))throw Error("".concat(t," was expected to be an object but we got ").concat(typeof e,"!"))},t.isString=n,t.assertString=function(e,t){if(void 0===t&&(t="data"),!n(e))throw Error("".concat(t," was expected to be a string but we got ").concat(typeof e,"!"))},t.assertImage=function(e,t){if(void 0===t&&(t="data"),!(e instanceof HTMLImageElement))throw Error("".concat(t," was expected to be an Image but we got ").concat(typeof e,"!"))}},875:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(319);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(a).default}})},319:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){var t=this;this.canvas=e,this.painters=[],this.playing=!1,this.paint=function(e){var n,a;try{for(var o=r(t.painters),i=o.next();!i.done;i=o.next())i.value.paint(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}},this.anim=function(e){var n,a;try{for(var o=r(t.painters),i=o.next();!i.done;i=o.next())i.value.anim(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}};var n=e.getContext("webgl");if(!n)throw Error("Unable to create WebGL Context!");this.gl=n,new ResizeObserver((function(n){var a,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next())if(u.value.target===e){var s=e.clientWidth,c=e.clientHeight;t.resize(s,c)}}catch(e){a={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(a)throw a.error}}})).observe(e)}return e.prototype.setPainters=function(e){this.painters=e},e.prototype.play=function(){var e=this;if(!this.playing){this.playing=!0;var t=function(r){e.paint(r),e.anim(r),e.playing&&window.requestAnimationFrame(t)};window.requestAnimationFrame(t)}},e.prototype.stop=function(){this.playing=!1},e.prototype.resize=function(e,t){var r=this;window.requestAnimationFrame((function(){var n=r,a=n.gl,o=n.canvas;o.setAttribute("width","".concat(e)),o.setAttribute("height","".concat(t)),a.viewport(0,0,e,t)}))},e}();t.default=n},919:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),a(r(910),t)},910:(e,t)=>{function r(e){var t=e.createTexture();if(!t)throw Error("Unable to create WebGL texture!");return t}Object.defineProperty(t,"__esModule",{value:!0}),t.textureRepeatVertical=t.textureRepeatHorizontal=t.textureRepeat=t.textureClampToEdgeVertical=t.textureClampToEdgeHorizontal=t.textureClampToEdge=t.createTextureFromImageRepeat=t.createTextureFromImage=t.createTexture=void 0,t.createTexture=r,t.createTextureFromImage=function(e,t){var n=r(e);return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n},t.createTextureFromImageRepeat=function(e,t){var n=r(e);return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n},t.textureClampToEdge=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureClampToEdgeHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)},t.textureClampToEdgeVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureRepeat=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)},t.textureRepeatHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT)},t.textureRepeatVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)}}},e=>{e(e.s=465)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFnQjVJLEVBQUc2SSxnQkFHMUQsc0NBQ0k3SSxFQUNBeUksR0FFQXpJLEVBQUcwRSxZQUFZMUUsRUFBRzJFLFdBQVk4RCxHQUM5QnpJLEVBQUcySSxjQUFjM0ksRUFBRzJFLFdBQVkzRSxFQUFHOEksZUFBZ0I5SSxFQUFHNkksZ0JBRzFELHlCQUE4QjdJLEVBQTJCeUksR0FDckR6SSxFQUFHMEUsWUFBWTFFLEVBQUcyRSxXQUFZOEQsR0FDOUJ6SSxFQUFHMkksY0FBYzNJLEVBQUcyRSxXQUFZM0UsRUFBRzRJLGVBQWdCNUksRUFBR3FKLFFBQ3REckosRUFBRzJJLGNBQWMzSSxFQUFHMkUsV0FBWTNFLEVBQUc4SSxlQUFnQjlJLEVBQUdxSixTQUcxRCxtQ0FDSXJKLEVBQ0F5SSxHQUVBekksRUFBRzBFLFlBQVkxRSxFQUFHMkUsV0FBWThELEdBQzlCekksRUFBRzJJLGNBQWMzSSxFQUFHMkUsV0FBWTNFLEVBQUc0SSxlQUFnQjVJLEVBQUdxSixTQUcxRCxpQ0FDSXJKLEVBQ0F5SSxHQUVBekksRUFBRzBFLFlBQVkxRSxFQUFHMkUsV0FBWThELEdBQzlCekksRUFBRzJJLGNBQWMzSSxFQUFHMkUsV0FBWTNFLEVBQUc4SSxlQUFnQjlJLEVBQUdxSixXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWdhdGhlLTIwMjIvLi9zcmMvaW5kZXguY3NzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL2luZGV4LmNzcz85MDk1Iiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYWdhdGhlLTIwMjIvLi9zcmMvYWdlbnRzL2NhdC50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9hZ2VudHMvbW91c2UudHMiLCJ3ZWJwYWNrOi8vYWdhdGhlLTIwMjIvLi9zcmMvYXNzZXRzL2luZGV4LnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL3BhaW50ZXJzL2JhY2tncm91bmQvYmFja2dyb3VuZC1wYWludGVyLnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL3BhaW50ZXJzL2JhY2tncm91bmQvYmFzZS1iYWNrZ3JvdW5kLXBhaW50ZXIudHMiLCJ3ZWJwYWNrOi8vYWdhdGhlLTIwMjIvLi9zcmMvcGFpbnRlcnMvYmFja2dyb3VuZC9pbmRleC50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9wYWludGVycy9zcHJpdGUvYmFzZS1zcHJpdGUtcGFpbnRlci50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9wYWludGVycy9zcHJpdGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vYWdhdGhlLTIwMjIvLi9zcmMvcGFpbnRlcnMvc3ByaXRlL3Nwcml0ZS1wYWludGVyLnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL3BhaW50ZXJzL3dhbGwvYmFzZS13YWxsLXBhaW50ZXIudHMiLCJ3ZWJwYWNrOi8vYWdhdGhlLTIwMjIvLi9zcmMvcGFpbnRlcnMvd2FsbC9pbmRleC50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9wYWludGVycy93YWxsL3dhbGwtcGFpbnRlci50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy9ydW50aW1lLnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL3Rvb2xzLnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL3ZhbGlkYXRvci50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy93ZWJnbC9zY2VuZS9pbmRleC50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy93ZWJnbC9zY2VuZS9zY2VuZS50cyIsIndlYnBhY2s6Ly9hZ2F0aGUtMjAyMi8uL3NyYy93ZWJnbC90ZXh0dXJlL2luZGV4LnRzIiwid2VicGFjazovL2FnYXRoZS0yMDIyLy4vc3JjL3dlYmdsL3RleHR1cmUvdGV4dHVyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHksXFxuaHRtbCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbGVmdDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbmJvZHkgPiBjYW52YXMjY2FudmFzIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG59XFxuXFxuI3RnZC1sb2dvLnZhbmlzaCB7XFxuICAgIC0tZHVyYXRpb246IDkwMG1zO1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgdmFyKC0tZHVyYXRpb24pO1xcbiAgICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4jdGdkLWxvZ28gPiBwcm9ncmVzcyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMXJlbTtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGhlaWdodDogMXJlbTtcXG4gICAgbWFyZ2luLXRvcDogLTAuNXJlbTtcXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDJyZW0pO1xcbiAgICBib3gtc2hhZG93OiAwIDAgMXJlbSAuNXJlbSAjMDAwNztcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbjpyb290IHtcXG4gICAgLS10aGVtZS1jb2xvci1zY3JlZW46ICMzMjE7XFxuICAgIC0tdGhlbWUtY29sb3ItcHJpbWFyeTogI2Q3MDtcXG4gICAgLS10aGVtZS1jb2xvci1wcmltYXJ5LWxpZ2h0OiAjZjkyO1xcbiAgICAtLXRoZW1lLWNvbG9yLXByaW1hcnktZGFyazogIzc0MDtcXG59XFxuXFxucHJvZ3Jlc3NbdmFsdWVdIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgbWFyZ2luOiAxcmVtIDA7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgaGVpZ2h0OiAwLjVyZW07XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICB0byB0b3AsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNTAlLFxcbiAgICAgICAgICAgICNmZmY3IDUwJSxcXG4gICAgICAgICAgICAjZmZmN1xcbiAgICAgICAgKSxcXG4gICAgICAgIGxpbmVhci1ncmFkaWVudCh2YXIoLS10aGVtZS1jb2xvci1zY3JlZW4pLCB2YXIoLS10aGVtZS1jb2xvci1zY3JlZW4pKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgICBib3gtc2hhZG93OiAwIDAuMTI1cmVtIDAuMjVyZW0gIzAwMDcgaW5zZXQsIDAgLTAuMTI1cmVtIDAuMjVyZW0gI2ZmZjcgaW5zZXQ7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxucHJvZ3Jlc3NbdmFsdWVdOjotd2Via2l0LXByb2dyZXNzLWJhciB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICB0byB0b3AsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNTAlLFxcbiAgICAgICAgICAgICNmZmY3IDUwJSxcXG4gICAgICAgICAgICAjZmZmN1xcbiAgICAgICAgKSxcXG4gICAgICAgIGxpbmVhci1ncmFkaWVudCh2YXIoLS10aGVtZS1jb2xvci1zY3JlZW4pLCB2YXIoLS10aGVtZS1jb2xvci1zY3JlZW4pKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgICBib3gtc2hhZG93OiAwIDAuMTI1cmVtIDAuMjVyZW0gIzAwMDcgaW5zZXQsIDAgLTAuMTI1cmVtIDAuMjVyZW0gI2ZmZjcgaW5zZXQ7XFxufVxcblxcbnByb2dyZXNzW3ZhbHVlXTo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlLCAxLjVyZW0gMXJlbSwgMTAwJSAxMDAlO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwLjVyZW0gdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeSk7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICB0byB0b3AsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNTAlLFxcbiAgICAgICAgICAgICNmZmY3IDUwJSxcXG4gICAgICAgICAgICAjZmZmN1xcbiAgICAgICAgKSxcXG4gICAgICAgIGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICAxMzVkZWcsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgMzMlLFxcbiAgICAgICAgICAgICMwMDAyIDMzJSxcXG4gICAgICAgICAgICAjMDAwMiA2NiUsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNjYlXFxuICAgICAgICApLFxcbiAgICAgICAgbGluZWFyLWdyYWRpZW50KFxcbiAgICAgICAgICAgIHRvIHRvcCxcXG4gICAgICAgICAgICB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LWxpZ2h0KSxcXG4gICAgICAgICAgICB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LWRhcmspXFxuICAgICAgICApO1xcbn1cXG5cXG5wcm9ncmVzc1t2YWx1ZV06Oi1tb3otcHJvZ3Jlc3MtYmFyIHtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxcbiAgICAgICAgICAgIHRvIHRvcCxcXG4gICAgICAgICAgICB0cmFuc3BhcmVudCxcXG4gICAgICAgICAgICB0cmFuc3BhcmVudCA1MCUsXFxuICAgICAgICAgICAgI2ZmZjcgNTAlLFxcbiAgICAgICAgICAgICNmZmY3XFxuICAgICAgICApLFxcbiAgICAgICAgbGluZWFyLWdyYWRpZW50KFxcbiAgICAgICAgICAgIDEzNWRlZyxcXG4gICAgICAgICAgICB0cmFuc3BhcmVudCxcXG4gICAgICAgICAgICB0cmFuc3BhcmVudCAzMyUsXFxuICAgICAgICAgICAgIzAwMDIgMzMlLFxcbiAgICAgICAgICAgICMwMDAyIDY2JSxcXG4gICAgICAgICAgICB0cmFuc3BhcmVudCA2NiVcXG4gICAgICAgICksXFxuICAgICAgICBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICAgICAgdG8gdG9wLFxcbiAgICAgICAgICAgIHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnktbGlnaHQpLFxcbiAgICAgICAgICAgIHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnktZGFyaylcXG4gICAgICAgICk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlLCAxLjVyZW0gMXJlbSwgMTAwJSAxMDAlO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICAgIGJveC1zaGFkb3c6IDAgMCAuNXJlbSAuNXJlbSAjZmY4ZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7SUFFSSxrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFlBQVk7SUFDWixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxZQUFZO0lBQ1osT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1Qsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLCtCQUErQjtJQUMvQixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFFBQVE7SUFDUixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4QixnQ0FBZ0M7SUFDaEMsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksMEJBQTBCO0lBQzFCLDJCQUEyQjtJQUMzQixpQ0FBaUM7SUFDakMsZ0NBQWdDO0FBQ3BDOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGNBQWM7SUFDZDs7Ozs7Ozs2RUFPeUU7SUFDekUscUJBQXFCO0lBQ3JCLDJFQUEyRTtJQUMzRSxrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0k7Ozs7Ozs7NkVBT3lFO0lBQ3pFLHFCQUFxQjtJQUNyQiwyRUFBMkU7QUFDL0U7O0FBRUE7SUFDSSxrREFBa0Q7SUFDbEQscUJBQXFCO0lBQ3JCLGlEQUFpRDtJQUNqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQW1CSztBQUNUOztBQUVBO0lBQ0k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0FtQks7SUFDTCxrREFBa0Q7SUFDbEQscUJBQXFCO0lBQ3JCLGlDQUFpQztBQUNyQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5LFxcbmh0bWwge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG5ib2R5ID4gY2FudmFzI2NhbnZhcyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbGVmdDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxufVxcblxcbiN0Z2QtbG9nby52YW5pc2gge1xcbiAgICAtLWR1cmF0aW9uOiA5MDBtcztcXG4gICAgdHJhbnNpdGlvbjogYWxsIHZhcigtLWR1cmF0aW9uKTtcXG4gICAgb3BhY2l0eTogMDtcXG59XFxuXFxuI3RnZC1sb2dvID4gcHJvZ3Jlc3Mge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDFyZW07XFxuICAgIHRvcDogNTAlO1xcbiAgICBoZWlnaHQ6IDFyZW07XFxuICAgIG1hcmdpbi10b3A6IC0wLjVyZW07XFxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAycmVtKTtcXG4gICAgYm94LXNoYWRvdzogMCAwIDFyZW0gLjVyZW0gIzAwMDc7XFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG46cm9vdCB7XFxuICAgIC0tdGhlbWUtY29sb3Itc2NyZWVuOiAjMzIxO1xcbiAgICAtLXRoZW1lLWNvbG9yLXByaW1hcnk6ICNkNzA7XFxuICAgIC0tdGhlbWUtY29sb3ItcHJpbWFyeS1saWdodDogI2Y5MjtcXG4gICAgLS10aGVtZS1jb2xvci1wcmltYXJ5LWRhcms6ICM3NDA7XFxufVxcblxcbnByb2dyZXNzW3ZhbHVlXSB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIG1hcmdpbjogMXJlbSAwO1xcbiAgICBhcHBlYXJhbmNlOiBub25lO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGhlaWdodDogMC41cmVtO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICAgICAgdG8gdG9wLFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50LFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDUwJSxcXG4gICAgICAgICAgICAjZmZmNyA1MCUsXFxuICAgICAgICAgICAgI2ZmZjdcXG4gICAgICAgICksXFxuICAgICAgICBsaW5lYXItZ3JhZGllbnQodmFyKC0tdGhlbWUtY29sb3Itc2NyZWVuKSwgdmFyKC0tdGhlbWUtY29sb3Itc2NyZWVuKSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gICAgYm94LXNoYWRvdzogMCAwLjEyNXJlbSAwLjI1cmVtICMwMDA3IGluc2V0LCAwIC0wLjEyNXJlbSAwLjI1cmVtICNmZmY3IGluc2V0O1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbnByb2dyZXNzW3ZhbHVlXTo6LXdlYmtpdC1wcm9ncmVzcy1iYXIge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICAgICAgdG8gdG9wLFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50LFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDUwJSxcXG4gICAgICAgICAgICAjZmZmNyA1MCUsXFxuICAgICAgICAgICAgI2ZmZjdcXG4gICAgICAgICksXFxuICAgICAgICBsaW5lYXItZ3JhZGllbnQodmFyKC0tdGhlbWUtY29sb3Itc2NyZWVuKSwgdmFyKC0tdGhlbWUtY29sb3Itc2NyZWVuKSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gICAgYm94LXNoYWRvdzogMCAwLjEyNXJlbSAwLjI1cmVtICMwMDA3IGluc2V0LCAwIC0wLjEyNXJlbSAwLjI1cmVtICNmZmY3IGluc2V0O1xcbn1cXG5cXG5wcm9ncmVzc1t2YWx1ZV06Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUge1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJSwgMS41cmVtIDFyZW0sIDEwMCUgMTAwJTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgICBib3gtc2hhZG93OiAwIDAgMC41cmVtIHZhcigtLXRoZW1lLWNvbG9yLXByaW1hcnkpO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICAgICAgdG8gdG9wLFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50LFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDUwJSxcXG4gICAgICAgICAgICAjZmZmNyA1MCUsXFxuICAgICAgICAgICAgI2ZmZjdcXG4gICAgICAgICksXFxuICAgICAgICBsaW5lYXItZ3JhZGllbnQoXFxuICAgICAgICAgICAgMTM1ZGVnLFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50LFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDMzJSxcXG4gICAgICAgICAgICAjMDAwMiAzMyUsXFxuICAgICAgICAgICAgIzAwMDIgNjYlLFxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50IDY2JVxcbiAgICAgICAgKSxcXG4gICAgICAgIGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICB0byB0b3AsXFxuICAgICAgICAgICAgdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeS1saWdodCksXFxuICAgICAgICAgICAgdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeS1kYXJrKVxcbiAgICAgICAgKTtcXG59XFxuXFxucHJvZ3Jlc3NbdmFsdWVdOjotbW96LXByb2dyZXNzLWJhciB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICB0byB0b3AsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNTAlLFxcbiAgICAgICAgICAgICNmZmY3IDUwJSxcXG4gICAgICAgICAgICAjZmZmN1xcbiAgICAgICAgKSxcXG4gICAgICAgIGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgICAgICAxMzVkZWcsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgMzMlLFxcbiAgICAgICAgICAgICMwMDAyIDMzJSxcXG4gICAgICAgICAgICAjMDAwMiA2NiUsXFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNjYlXFxuICAgICAgICApLFxcbiAgICAgICAgbGluZWFyLWdyYWRpZW50KFxcbiAgICAgICAgICAgIHRvIHRvcCxcXG4gICAgICAgICAgICB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LWxpZ2h0KSxcXG4gICAgICAgICAgICB2YXIoLS10aGVtZS1jb2xvci1wcmltYXJ5LWRhcmspXFxuICAgICAgICApO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJSwgMS41cmVtIDFyZW0sIDEwMCUgMTAwJTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgICBib3gtc2hhZG93OiAwIDAgLjVyZW0gLjVyZW0gI2ZmOGU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IHsgQ09MVU1OUyB9IGZyb20gXCIuLy4uL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tIFwiLi4vcGFpbnRlcnMvc3ByaXRlXCJcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIi4uL3Rvb2xzXCJcblxuY29uc3QgU1BFRUQgPSAwLjAwOFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXQgaW1wbGVtZW50cyBTcHJpdGUge1xuICAgIGNvbDogbnVtYmVyID0gMFxuICAgIHJvdzogbnVtYmVyID0gMFxuICAgIHg6IG51bWJlciA9IDBcbiAgICB5OiBudW1iZXIgPSAwXG4gICAgc2l6ZTogbnVtYmVyID0gMSAvIENPTFVNTlNcblxuICAgIHByaXZhdGUgdGFyZ2V0ID0gMFxuXG4gICAgcmVhZG9ubHkgb25Qb2ludGVyTW92ZSA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xpZW50V2lkdGhcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IGNsYW1wKGV2ZW50LmNsaWVudFggLyB3aWR0aClcbiAgICAgICAgdGhpcy50YXJnZXQgPSAtMSArICgyICogKE1hdGguZmxvb3IoQ09MVU1OUyAqIHBlcmNlbnQpICsgMC41KSkgLyBDT0xVTU5TXG4gICAgfVxuXG4gICAgYW5pbShkZWx0YTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNoaWZ0ID0gU1BFRUQgKiBkZWx0YVxuICAgICAgICBpZiAodGhpcy50YXJnZXQgPCB0aGlzLngpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IE1hdGgubWF4KHRoaXMudGFyZ2V0LCB0aGlzLnggLSBzaGlmdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueCA9IE1hdGgubWluKHRoaXMudGFyZ2V0LCB0aGlzLnggKyBzaGlmdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwiaW1wb3J0IHsgQ09MVU1OUywgU1BFRUQgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCJcbmltcG9ydCB7IFNwcml0ZSB9IGZyb20gXCIuLi9wYWludGVycy9zcHJpdGVcIlxuaW1wb3J0IHsgcmFuZCB9IGZyb20gXCIuLi90b29sc1wiXG5cbmNvbnN0IFNQRUVEX01PVVNFID0gU1BFRUQgKiAxXG5jb25zdCBUT1AgPSAwLjJcbmNvbnN0IEJPVFRPTSA9IC0xXG4vLyBNaWNlIGFyZSBzcHJlYWQgb24gdGhpcyBkaXN0YW5jZVxuY29uc3QgU1BSRUFEID0gTWF0aC5hYnMoVE9QIC0gQk9UVE9NKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXQgaW1wbGVtZW50cyBTcHJpdGUge1xuICAgIGNvbDogbnVtYmVyID0gMFxuICAgIHJvdzogbnVtYmVyID0gMVxuICAgIHg6IG51bWJlciA9IHNuYXAocmFuZCgwLCAxKSlcbiAgICB5OiBudW1iZXIgPSAwXG4gICAgc2l6ZTogbnVtYmVyID0gMSAvIENPTFVNTlNcbiAgICBwcml2YXRlIHNwZWVkID0gMVxuXG4gICAgY29uc3RydWN0b3IoaW5kZXg6IG51bWJlciwgY291bnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnkgPSBCT1RUT00gKyAoU1BSRUFEICogaW5kZXgpIC8gY291bnRcbiAgICB9XG5cbiAgICBhbmltKGRlbHRhOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBTUEVFRCAqIHRoaXMuc3BlZWQgKiBkZWx0YVxuICAgICAgICB0aGlzLnkgKz0gc2hpZnRcbiAgICAgICAgaWYgKHRoaXMueSA+IFRPUCkge1xuICAgICAgICAgICAgdGhpcy55ID0gQk9UVE9NICsgdGhpcy55IC0gVE9QXG4gICAgICAgICAgICB0aGlzLnggPSBzbmFwKHJhbmQoMCwgMSkpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNuYXAoeDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIC0xICsgKDIgKiAoTWF0aC5mbG9vcihDT0xVTU5TICogeCkgKyAwLjUpKSAvIENPTFVNTlNcbn1cbiIsImludGVyZmFjZSBBc3NldHNVUkxzIHtcbiAgICBbaWQ6IHN0cmluZ106IHN0cmluZ1xufVxuXG50eXBlIEFzc2V0ID0gSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBdWRpb0VsZW1lbnQgfCBzdHJpbmdcblxuZXhwb3J0IGludGVyZmFjZSBBc3NldHMge1xuICAgIFtpZDogc3RyaW5nXTogQXNzZXRcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQXNzZXRzKFxuICAgIGFzc2V0c1VSTHM6IEFzc2V0c1VSTHMsXG4gICAgb25Qcm9ncmVzczogKHBlcmNlbnRhZ2U6IG51bWJlcikgPT4gdm9pZFxuKTogUHJvbWlzZTxBc3NldHM+IHtcbiAgICBjb25zdCBhc3NldHM6IEFzc2V0cyA9IHt9XG4gICAgb25Qcm9ncmVzcygwKVxuICAgIGNvbnN0IGlkcyA9IE9iamVjdC5rZXlzKGFzc2V0c1VSTHMpXG4gICAgbGV0IGNvdW50ID0gMFxuICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG4gICAgICAgIGNvdW50KytcbiAgICAgICAgb25Qcm9ncmVzcyhjb3VudCAvIGlkcy5sZW5ndGgpXG4gICAgICAgIGNvbnN0IHVybCA9IGFzc2V0c1VSTHNbaWRdXG4gICAgICAgIGNvbnN0IGFzc2V0ID0gYXdhaXQgZmV0Y2hBc3NldCh1cmwpXG4gICAgICAgIGlmIChhc3NldCkgYXNzZXRzW2lkXSA9IGFzc2V0XG4gICAgfVxuICAgIG9uUHJvZ3Jlc3MoMSlcbiAgICByZXR1cm4gYXNzZXRzXG59XG5cbmNvbnN0IGxvYWRlZEF1ZGlvID0gbmV3IFNldDxIVE1MQXVkaW9FbGVtZW50PigpXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEFzc2V0KHVybDogc3RyaW5nKTogUHJvbWlzZTxBc3NldCB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGhhc0V4dGVuc2lvbih1cmwsIFwianBnXCIsIFwicG5nXCIsIFwiZ2lmXCIsIFwic3ZnXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKClcbiAgICAgICAgICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiXG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1nKVxuICAgICAgICAgICAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24gKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBsb2FkIGltYWdlIFwiJyArIHVybCArICdcIjonLCB1cmwpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgpXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbWcuc3JjID0gdXJsXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0V4dGVuc2lvbih1cmwsIFwib2dnXCIsIFwid2F2XCIsIFwibXAzXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIilcbiAgICAgICAgICAgICAgICBjb25zdCBzbG90ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9hZGVkQXVkaW8uaGFzKGF1ZGlvKSkgcmV0dXJuXG5cbiAgICAgICAgICAgICAgICAgICAgbG9hZGVkQXVkaW8uYWRkKGF1ZGlvKVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGF1ZGlvKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCBzbG90KVxuICAgICAgICAgICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsIHNsb3QpXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoc2xvdCwgMzAwMClcbiAgICAgICAgICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBsb2FkIHNvdW5kIFwiJyArIHVybCArICdcIjonLCB1cmwpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgpXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYXVkaW8uc3JjID0gdXJsXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkaW5nIGF1ZGlvOiBcIiwgdXJsKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybClcbiAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICBoYXNFeHRlbnNpb24odXJsLCBcImpzb25cIilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzcG9uc2UuanNvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc3BvbnNlLnRleHQoKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFVuYWJsZSB0byBsb2FkIFwiJHt1cmx9XCIhYCwgZXgpXG4gICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZClcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGhhc0V4dGVuc2lvbihuYW1lOiBzdHJpbmcsIC4uLmV4dGVuc2lvbnM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBleHQgb2YgZXh0ZW5zaW9ucykge1xuICAgICAgICBpZiAobmFtZS5lbmRzV2l0aChgLiR7ZXh0fWApKSByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cbiIsIi8qKlxuICogQ2F0LCBtaWNlIGFuZCBvdGhlciBvYmplY3RzIGNhbiBhcHBlYXIgaW4gYSBmaXhlZCBudW1iZXIgb2YgY29sdW1ucy5cbiAqIFRoZXJlIGFyZSBvbmx5IENPTFVNTlMgeCBwb3NpdGlvbnMgZm9yIGFueSBvZiB0aGVtLlxuICovXG5leHBvcnQgY29uc3QgQ09MVU1OUyA9IDVcblxuLyoqXG4gKiBUaGUgbWFyZ2luIGlzIHdoZXJlIHRoZSB3YWxscyB3aWxsIGJlIHBhaW50ZWQuXG4gKiBUaGVyZSBpcyBhIG1hcmdpbiBhdCB0aGUgbGVmdCBhbmQgb25lIGF0IHRoZSByaWdodC5cbiAqIE1BUkdJTiBpcyB0aGUgd2lkdGggb2Ygc3VjaCBtYXJnaW4sIGV4cHJlc3NlZCBpblxuICogY2xpcHBpbmcgc3BhY2UuXG4gKiAoSW4gY2xpcHBpbmcgc3BhY2UsIHRoZSBzY3JlZW4gaGFzIGEgdG90YWwgd2lkdGggb2YgMi4pXG4gKi9cbmV4cG9ydCBjb25zdCBNQVJHSU4gPSAwLjE1XG5cbi8qKlxuICogTGV0IFcgYmUgdGhlIHRoZSB3aWR0aCBvZiB0aGUgY29ycmlkb3IgKGZsb29yIHdpdGhvdXQgdGhlIHdhbGxzKVxuICogaW4gcGl4ZWxzLlxuICogVGhlIFNQRUVEIGlzIFcgcGl4ZWxzIHBlciBtc2VjLlxuICovXG5leHBvcnQgY29uc3QgU1BFRUQgPSAwLjAwMDNcblxuZXhwb3J0IGNvbnN0IE1PVVNFX0NPVU5UID0gNSIsImltcG9ydCBcIi4vaW5kZXguY3NzXCJcbmltcG9ydCB7IGZldGNoQXNzZXRzIH0gZnJvbSBcIi4vYXNzZXRzXCJcbmltcG9ydCB7IHN0YXJ0QXBwbGljYXRpb24gfSBmcm9tIFwiLi9tYWluXCJcblxuY29uc3QgQVNTRVRTID0ge1xuICAgIGZsb29yVGV4dHVyZTogXCJhc3NldHMvaW1nL2Zsb29yLmpwZ1wiLFxuICAgIHdhbGxUZXh0dXJlOiBcImFzc2V0cy9pbWcvd2FsbC5qcGdcIixcbiAgICBzcHJpdGVzVGV4dHVyZTogXCJhc3NldHMvaW1nL3Nwcml0ZXMucG5nXCIsXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBhc3NldHMuLi5cIilcbiAgICBjb25zdCBwcm9ncmVzcyA9IGNyZWF0ZVByb2dyZXNzKClcbiAgICBjb25zdCBhc3NldHMgPSBhd2FpdCBmZXRjaEFzc2V0cyhBU1NFVFMsICh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgICAgIHByb2dyZXNzLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGAkezEwMCAqIHZhbHVlfWApXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyhcIkFzc2V0cyBsb2FkZWQuXCIpXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcbiAgICBpZiAoIWNhbnZhcykgdGhyb3cgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBtYWluIENhbnZhcyFcIilcblxuICAgIHN0YXJ0QXBwbGljYXRpb24oY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50LCBhc3NldHMpXG4gICAgcmVtb3ZlU3BsYXNoU2NyZWVuKClcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvZ3Jlc3MoKSB7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJvZ3Jlc3NcIilcbiAgICBwcm9ncmVzcy5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInRnZC1wcm9ncmVzc1wiKVxuICAgIHByb2dyZXNzLnNldEF0dHJpYnV0ZShcIm1pblwiLCBcIjBcIilcbiAgICBwcm9ncmVzcy5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgXCIxMDBcIilcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRnZC1sb2dvXCIpPy5hcHBlbmRDaGlsZChwcm9ncmVzcylcbiAgICByZXR1cm4gcHJvZ3Jlc3Ncbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3BsYXNoU2NyZWVuKCkge1xuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGdkLWxvZ29cIilcbiAgICBpZiAoIWRpdikgdGhyb3cgRXJyb3IoXCJUaGVyZSBpcyBubyBzcGxhc2ggc2NyZWVuIVwiKVxuXG4gICAgY29uc3QgRFVSQVRJT04gPSA5MDBcbiAgICBkaXYuc3R5bGUuc2V0UHJvcGVydHkoXCItLWR1cmF0aW9uXCIsIGAke0RVUkFUSU9OfW1zYClcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcInZhbmlzaFwiKVxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpXG4gICAgfSwgRFVSQVRJT04pXG59XG5cbnZvaWQgc3RhcnQoKVxuIiwiaW1wb3J0IHsgQXNzZXRzIH0gZnJvbSBcIi4vYXNzZXRzXCJcbmltcG9ydCBTY2VuZSBmcm9tIFwiLi93ZWJnbC9zY2VuZVwiXG5pbXBvcnQgV2FsbFBhaW50ZXIgZnJvbSBcIi4vcGFpbnRlcnMvd2FsbFwiXG5pbXBvcnQgQmFja2dyb3VuZFBhaW50ZXIgZnJvbSBcIi4vcGFpbnRlcnMvYmFja2dyb3VuZFwiXG5pbXBvcnQgeyBhc3NlcnRJbWFnZSB9IGZyb20gXCIuL3ZhbGlkYXRvclwiXG5pbXBvcnQgUnVudGltZSBmcm9tIFwiLi9ydW50aW1lXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0QXBwbGljYXRpb24oY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgYXNzZXRzOiBBc3NldHMpIHtcbiAgICBhc3NlcnRBc3NldHMoYXNzZXRzKVxuICAgIGNvbnN0IHNjZW5lID0gbmV3IFNjZW5lKGNhbnZhcylcbiAgICBjb25zdCBydW50aW1lID0gbmV3IFJ1bnRpbWUoc2NlbmUuZ2wsIGFzc2V0cy5zcHJpdGVzVGV4dHVyZSlcbiAgICBzY2VuZS5zZXRQYWludGVycyhbXG4gICAgICAgIG5ldyBCYWNrZ3JvdW5kUGFpbnRlcihzY2VuZS5nbCwgYXNzZXRzLmZsb29yVGV4dHVyZSksXG4gICAgICAgIG5ldyBXYWxsUGFpbnRlcihzY2VuZS5nbCwgYXNzZXRzLndhbGxUZXh0dXJlKSxcbiAgICAgICAgcnVudGltZSxcbiAgICBdKVxuICAgIHNjZW5lLnBsYXkoKVxufVxuXG5mdW5jdGlvbiBhc3NlcnRBc3NldHMoZGF0YTogeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0pOiBhc3NlcnRzIGRhdGEgaXMge1xuICAgIGZsb29yVGV4dHVyZTogSFRNTEltYWdlRWxlbWVudFxuICAgIHdhbGxUZXh0dXJlOiBIVE1MSW1hZ2VFbGVtZW50XG4gICAgc3ByaXRlc1RleHR1cmU6IEhUTUxJbWFnZUVsZW1lbnRcbn0ge1xuICAgIGFzc2VydEltYWdlKGRhdGEuZmxvb3JUZXh0dXJlLCBcImRhdGEuZmxvb3JUZXh0dXJlXCIpXG4gICAgYXNzZXJ0SW1hZ2UoZGF0YS53YWxsVGV4dHVyZSwgXCJkYXRhLndhbGxUZXh0dXJlXCIpXG4gICAgYXNzZXJ0SW1hZ2UoZGF0YS5zcHJpdGVzVGV4dHVyZSwgXCJkYXRhLnNwcml0ZXNUZXh0dXJlXCIpXG59XG4iLCJpbXBvcnQgeyBNQVJHSU4sIFNQRUVEIH0gZnJvbSBcIi4vLi4vLi4vY29uc3RhbnRzXCJcbmltcG9ydCBCYXNlQmFja2dyb3VuZFBhaW50ZXIgZnJvbSBcIi4vYmFzZS1iYWNrZ3JvdW5kLXBhaW50ZXJcIlxuaW1wb3J0IHsgY3JlYXRlVGV4dHVyZUZyb21JbWFnZVJlcGVhdCB9IGZyb20gXCIuLi8uLi93ZWJnbC90ZXh0dXJlXCJcblxuY29uc3QgU0hSSU5LID0gMSAtIE1BUkdJTlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrZ3JvdW5kUGFpbnRlciBleHRlbmRzIEJhc2VCYWNrZ3JvdW5kUGFpbnRlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0dXJlOiBXZWJHTFRleHR1cmVcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgICAgICBpbWFnZTogSFRNTEltYWdlRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGdsKVxuICAgICAgICB0aGlzLnRleHR1cmUgPSBjcmVhdGVUZXh0dXJlRnJvbUltYWdlUmVwZWF0KGdsLCBpbWFnZSlcbiAgICAgICAgY29uc3QgZGF0YSA9IEJhY2tncm91bmRQYWludGVyLmNyZWF0ZURhdGFBcnJheSg0KVxuICAgICAgICBCYWNrZ3JvdW5kUGFpbnRlci5wb2tlRGF0YShkYXRhLCAwLCAtU0hSSU5LLCArMSwgMCwgMClcbiAgICAgICAgQmFja2dyb3VuZFBhaW50ZXIucG9rZURhdGEoZGF0YSwgMSwgK1NIUklOSywgKzEsIDEsIDApXG4gICAgICAgIEJhY2tncm91bmRQYWludGVyLnBva2VEYXRhKGRhdGEsIDIsIC1TSFJJTkssIC0xLCAwLCAxKVxuICAgICAgICBCYWNrZ3JvdW5kUGFpbnRlci5wb2tlRGF0YShkYXRhLCAzLCArU0hSSU5LLCAtMSwgMSwgMSlcbiAgICAgICAgdGhpcy5wdXNoRGF0YUFycmF5KGRhdGEpXG4gICAgfVxuXG4gICAgYW5pbSh0aW1lOiBudW1iZXIpIHt9XG5cbiAgICBwcm90ZWN0ZWQgYWN0dWFsUGFpbnQodGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBnbC5jYW52YXNcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORClcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKVxuICAgICAgICB0aGlzLiR1bmlUZXh0dXJlKHRoaXMudGV4dHVyZSlcbiAgICAgICAgdGhpcy4kdW5pU2NyZWVuKHdpZHRoLCBoZWlnaHQpXG4gICAgICAgIHRoaXMuJHVuaVNocmluayhTSFJJTkspXG4gICAgICAgIHRoaXMuJHVuaVNwZWVkKFNQRUVEKVxuICAgICAgICB0aGlzLiR1bmlUaW1lKHRpbWUpXG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFjdHVhbERlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcbiAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLnRleHR1cmUpXG4gICAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIGZpbGUgaGFzIGJlZW4gZ2VuZXJhdGdlZCBhdXRvbWF0aWNhbGx5IG9uIDIwMjItMDItMTFUMDk6Mzg6MjIuMDYyWlxuICogUGxlYXNlIGV4dGVuZHMgdGhpcyBhYnN0cmFjdCBjbGFzcyB0byBoYXZlIGl0IHdvcmsuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEJhc2VQYWludGVyIHtcbiAgICBwcml2YXRlIHN0YXRpYyBWRVJUID0gYC8vIFRpbWUgaW4gbXNlY1xudW5pZm9ybSBmbG9hdCB1bmlUaW1lO1xuLy8gQ29ycmlkb3JzIHdpZHRoIHBlciBtc2VjXG51bmlmb3JtIGZsb2F0IHVuaVNwZWVkO1xuLy8gQ29ycmlkb3Igd2lkdGggLyBzY3JlZW4gd2lkdGhcbnVuaWZvcm0gZmxvYXQgdW5pU2hyaW5rO1xuLy8gU2NyZWVuIHdpZHRoIGFuZCBoZWlnaHRcbnVuaWZvcm0gdmVjMiB1bmlTY3JlZW47XG5cbi8vIFRoZSByZWFsIHBvc2l0aW9uIG9mIHRoZSBjb3JyaWRvclxuYXR0cmlidXRlIHZlYzIgYXR0UG9zO1xuLy8gKDAsMCksICgxLDApLCAoMCwxKSwgKDEsMSlcbmF0dHJpYnV0ZSB2ZWMyIGF0dFVWO1xuXG52YXJ5aW5nIHZlYzIgdmFyVVY7XG5cbnZvaWQgbWFpbigpIHtcbiAgICBmbG9hdCB3ID0gdW5pU2NyZWVuLnggKiB1bmlTaHJpbms7XG4gICAgZmxvYXQgaCA9IHVuaVNjcmVlbi55O1xuICAgIHZhclVWID0gYXR0VVYgKiB2ZWMyKDEuMCwgaCAvIHcpO1xuICAgIHZhclVWICs9IHZlYzIoMCwgdW5pVGltZSAqIHVuaVNwZWVkKTtcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoIGF0dFBvcy54LCBhdHRQb3MueSwgMS4wLCAxLjAgKTtcbn1cbmBcbiAgICBwcml2YXRlIHN0YXRpYyBGUkFHID0gYHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXG51bmlmb3JtIHNhbXBsZXIyRCB1bmlUZXh0dXJlO1xudmFyeWluZyB2ZWMyIHZhclVWO1xuXG52b2lkIG1haW4oKSB7XG4gIHZlYzMgY29sb3IgPSB0ZXh0dXJlMkQoIHVuaVRleHR1cmUsIHZhclVWICkucmdiO1xuICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgMS4wICk7XG59XG5gXG4gICAgcHJpdmF0ZSBzdGF0aWMgQVRUUklCU19DT1VOVCA9IDRcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcHJnOiBXZWJHTFByb2dyYW1cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgdmVydEJ1ZmY6IFdlYkdMQnVmZmVyXG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWRvbmx5IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgY29uc3QgdmVydEJ1ZmYgPSBnbC5jcmVhdGVCdWZmZXIoKVxuICAgICAgICBpZiAoIXZlcnRCdWZmKSB0aHJvdyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0wgQnVmZmVyIVwiKVxuXG4gICAgICAgIGNvbnN0IHByZyA9IGdsLmNyZWF0ZVByb2dyYW0oKVxuICAgICAgICBpZiAoIXByZykgdGhyb3cgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIGEgV2ViR0wgUHJvZ3JhbSFcIilcblxuICAgICAgICBjb25zdCB2ZXJ0U2hhZGVyID0gQmFzZVBhaW50ZXIuY3JlYXRlU2hhZGVyKFxuICAgICAgICAgICAgZ2wsXG4gICAgICAgICAgICBnbC5WRVJURVhfU0hBREVSLFxuICAgICAgICAgICAgQmFzZVBhaW50ZXIuVkVSVFxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGZyYWdTaGFkZXIgPSBCYXNlUGFpbnRlci5jcmVhdGVTaGFkZXIoXG4gICAgICAgICAgICBnbCxcbiAgICAgICAgICAgIGdsLkZSQUdNRU5UX1NIQURFUixcbiAgICAgICAgICAgIEJhc2VQYWludGVyLkZSQUdcbiAgICAgICAgKVxuICAgICAgICBnbC5hdHRhY2hTaGFkZXIocHJnLCB2ZXJ0U2hhZGVyKVxuICAgICAgICBnbC5hdHRhY2hTaGFkZXIocHJnLCBmcmFnU2hhZGVyKVxuICAgICAgICBnbC5saW5rUHJvZ3JhbShwcmcpXG4gICAgICAgIHRoaXMucHJnID0gcHJnXG4gICAgICAgIHRoaXMudmVydEJ1ZmYgPSB2ZXJ0QnVmZlxuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xuICAgICAgICBjb25zdCB7IGdsLCBwcmcsIHZlcnRCdWZmIH0gPSB0aGlzXG4gICAgICAgIGdsLmRlbGV0ZUJ1ZmZlcih2ZXJ0QnVmZilcbiAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbShwcmcpXG4gICAgICAgIHRoaXMuYWN0dWFsRGVzdHJveSgpXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVEYXRhQXJyYXkodmVydGV4Q291bnQ6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHZlcnRleENvdW50ICogNClcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHBva2VEYXRhKFxuICAgICAgICBkYXRhOiBGbG9hdDMyQXJyYXksXG4gICAgICAgIHZlcnRleEluZGV4OiBudW1iZXIsXG4gICAgICAgIGF0dFBvc19YOiBudW1iZXIsXG4gICAgICAgIGF0dFBvc19ZOiBudW1iZXIsXG4gICAgICAgIGF0dFVWX1g6IG51bWJlcixcbiAgICAgICAgYXR0VVZfWTogbnVtYmVyXG4gICAgKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHZlcnRleEluZGV4ICogQmFzZVBhaW50ZXIuQVRUUklCU19DT1VOVFxuICAgICAgICA7KGRhdGFbaW5kZXgrK10gPSBhdHRQb3NfWCksXG4gICAgICAgICAgICAoZGF0YVtpbmRleCsrXSA9IGF0dFBvc19ZKSxcbiAgICAgICAgICAgIChkYXRhW2luZGV4KytdID0gYXR0VVZfWCksXG4gICAgICAgICAgICAoZGF0YVtpbmRleCsrXSA9IGF0dFVWX1kpXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzd2FwRGF0YShkYXRhOiBGbG9hdDMyQXJyYXksIGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikge1xuICAgICAgICBsZXQgcHRyQSA9IGluZGV4QSAqIEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlRcbiAgICAgICAgbGV0IHB0ckIgPSBpbmRleEIgKiBCYXNlUGFpbnRlci5BVFRSSUJTX0NPVU5UXG4gICAgICAgIGxldCB0bXA6IG51bWJlciA9IDBcbiAgICAgICAgdG1wID0gZGF0YVtwdHJBXVxuICAgICAgICBkYXRhW3B0ckErK10gPSBkYXRhW3B0ckJdXG4gICAgICAgIGRhdGFbcHRyQisrXSA9IHRtcFxuICAgICAgICB0bXAgPSBkYXRhW3B0ckFdXG4gICAgICAgIGRhdGFbcHRyQSsrXSA9IGRhdGFbcHRyQl1cbiAgICAgICAgZGF0YVtwdHJCKytdID0gdG1wXG4gICAgICAgIHRtcCA9IGRhdGFbcHRyQV1cbiAgICAgICAgZGF0YVtwdHJBKytdID0gZGF0YVtwdHJCXVxuICAgICAgICBkYXRhW3B0ckIrK10gPSB0bXBcbiAgICAgICAgdG1wID0gZGF0YVtwdHJBXVxuICAgICAgICBkYXRhW3B0ckErK10gPSBkYXRhW3B0ckJdXG4gICAgICAgIGRhdGFbcHRyQisrXSA9IHRtcFxuICAgIH1cblxuICAgIHB1YmxpYyBwdXNoRGF0YUFycmF5KGRhdGE6IEZsb2F0MzJBcnJheSkge1xuICAgICAgICBjb25zdCB7IGdsLCB2ZXJ0QnVmZiB9ID0gdGhpc1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmVydEJ1ZmYpXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBkYXRhLCBnbC5TVEFUSUNfRFJBVylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc3RhcnQgRmlyc3QgdmVydGV4IGluZGV4IHRvIHB1c2hcbiAgICAgKiBAcGFyYW0gZW5kIEZpcnN0IHZlcnRleCBpbmRleCB0byBOT1QgcHVzaC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHVzaERhdGFTdWJBcnJheShkYXRhOiBGbG9hdDMyQXJyYXksIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHZlcnRCdWZmIH0gPSB0aGlzXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0QnVmZilcbiAgICAgICAgY29uc3QgTiA9IEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlRcbiAgICAgICAgY29uc3Qgc3ViRGF0YSA9IGRhdGEuc3ViYXJyYXkoc3RhcnQgKiBOLCBlbmQgKiBOKVxuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKFxuICAgICAgICAgICAgZ2wuQVJSQVlfQlVGRkVSLFxuICAgICAgICAgICAgc3RhcnQgKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgKiBOLFxuICAgICAgICAgICAgc3ViRGF0YVxuICAgICAgICApXG4gICAgfVxuXG4gICAgcHVibGljICR1bmlTaHJpbmsodmFsdWU6IG51bWJlcikge1xuICAgICAgICBjb25zdCB7IGdsLCBwcmcgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcInVuaVNocmlua1wiKVxuICAgICAgICBnbC51bmlmb3JtMWYobG9jYXRpb24sIHZhbHVlKVxuICAgIH1cblxuICAgIHB1YmxpYyAkdW5pU3BlZWQodmFsdWU6IG51bWJlcikge1xuICAgICAgICBjb25zdCB7IGdsLCBwcmcgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcInVuaVNwZWVkXCIpXG4gICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpXG4gICAgfVxuXG4gICAgcHVibGljICR1bmlUaW1lKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJ1bmlUaW1lXCIpXG4gICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpXG4gICAgfVxuXG4gICAgcHVibGljICR1bmlTY3JlZW4oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJ1bmlTY3JlZW5cIilcbiAgICAgICAgZ2wudW5pZm9ybTJmKGxvY2F0aW9uLCB4LCB5KVxuICAgIH1cblxuICAgIHB1YmxpYyAkdW5pVGV4dHVyZSh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJ1bmlUZXh0dXJlXCIpXG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpXG4gICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgMClcbiAgICB9XG5cbiAgICBwdWJsaWMgcGFpbnQodGltZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHByZyB9ID0gdGhpc1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByZylcbiAgICAgICAgY29uc3QgQlBFID0gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlQgKiBCUEVcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydEJ1ZmYpXG4gICAgICAgIC8vIGF0dFBvc1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgwKVxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKDAsIDIsIGdsLkZMT0FULCBmYWxzZSwgc3RyaWRlLCAwICogQlBFKVxuICAgICAgICAvLyBhdHRVVlxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgxKVxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKDEsIDIsIGdsLkZMT0FULCBmYWxzZSwgc3RyaWRlLCAyICogQlBFKVxuICAgICAgICB0aGlzLmFjdHVhbFBhaW50KHRpbWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciBhbGwgdGhlIHBhaW50ZXJzIGhhdmUgdGhlaXJcbiAgICAgKiBgcGFpbnQoKWAgbWV0aG9kIGJlZW4gY2FsbGVkLlxuICAgICAqIEl0IGRlYWxzIHdpdGggZXZlcnl0aGluZyB0YWtpbmcgdGltZSBhbmQgbm90IGRyYXdpbmcgYW55dGhpbmcuXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGFuaW0odGltZTogbnVtYmVyKTogdm9pZFxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGFjdHVhbFBhaW50KHRpbWU6IG51bWJlcik6IHZvaWRcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBhY3R1YWxEZXN0cm95KCk6IHZvaWRcblxuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZVNoYWRlcihcbiAgICAgICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcbiAgICAgICAgdHlwZTogbnVtYmVyLFxuICAgICAgICBjb2RlOiBzdHJpbmdcbiAgICApIHtcbiAgICAgICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpXG4gICAgICAgIGlmICghc2hhZGVyKSB0aHJvdyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0wgU2hhZGVyIVwiKVxuXG4gICAgICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIGNvZGUpXG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKVxuICAgICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coY29kZSlcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcjogXCIsXG4gICAgICAgICAgICAgICAgZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgICAgICBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikgPz9cbiAgICAgICAgICAgICAgICAgICAgXCJVbmtub3cgZXJyb3Igd2hpbGUgY29tcGlsaW5nIHRoZSBzaGFkZXIhXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2hhZGVyXG4gICAgfVxufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCIuL2JhY2tncm91bmQtcGFpbnRlclwiXG4iLCIvKipcbiAqIFRoaXMgZmlsZSBoYXMgYmVlbiBnZW5lcmF0Z2VkIGF1dG9tYXRpY2FsbHkgb24gMjAyMi0wMi0xMVQwOTozOToxMy43NzVaXG4gKiBQbGVhc2UgZXh0ZW5kcyB0aGlzIGFic3RyYWN0IGNsYXNzIHRvIGhhdmUgaXQgd29yay5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZVBhaW50ZXIge1xuICAgIHByaXZhdGUgc3RhdGljIFZFUlQgPSBgLy8gU2NyZWVuIHdpZHRoIGFuZCBoZWlnaHQuXG51bmlmb3JtIHZlYzIgdW5pU2NyZWVuO1xuLy8gU2hyaW5rIGZhY3RvciBvZiB0aGUgY29ycmlkb3IgY29tcGFyZWQgdG8gdGhlIHNjcmVlbiB3aWR0aC5cbnVuaWZvcm0gZmxvYXQgdW5pU2hyaW5rO1xuXG5hdHRyaWJ1dGUgdmVjMiBhdHRQb3M7XG5hdHRyaWJ1dGUgZmxvYXQgYXR0U2l6ZTtcbmF0dHJpYnV0ZSB2ZWMyIGF0dFVWO1xuXG52YXJ5aW5nIHZlYzIgdmFyVVY7XG5cbnZvaWQgbWFpbigpIHtcbiAgICB2YXJVViA9IGF0dFVWO1xuICAgIGZsb2F0IHcgPSB1bmlTY3JlZW4ueCAqIHVuaVNocmluaztcbiAgICBmbG9hdCBoID0gdW5pU2NyZWVuLnk7XG4gICAgZ2xfUG9pbnRTaXplID0gYXR0U2l6ZSAqIHc7XG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KCBcbiAgICAgICAgYXR0UG9zLnggKiB1bmlTaHJpbmssIFxuICAgICAgICAwLjggKyBhdHRQb3MueSAqIGggLyB3LCAxLjAsIDEuMCBcbiAgICApO1xufVxuYFxuICAgIHByaXZhdGUgc3RhdGljIEZSQUcgPSBgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbi8vIEF0bGFzIG9mIDh4OCBzcHJpdGVzLlxudW5pZm9ybSBzYW1wbGVyMkQgdW5pVGV4dHVyZTtcblxuLy8gU2l6ZSBvZiBhIGEgc2lkZSBvZiBhIHNxdWFyZSB0aWxlIGluIHRoZSBzcHJpdGVzJyBhdGxhcy5cbmNvbnN0IGZsb2F0IFRJTEUgPSAxLjAgLyA4LjA7XG5cbnZhcnlpbmcgdmVjMiB2YXJVVjtcblxudm9pZCBtYWluKCkge1xuICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHVuaVRleHR1cmUsIHZhclVWICsgVElMRSAqIGdsX1BvaW50Q29vcmQgKTtcbn1cbmBcbiAgICBwcml2YXRlIHN0YXRpYyBBVFRSSUJTX0NPVU5UID0gNVxuICAgIHByb3RlY3RlZCByZWFkb25seSBwcmc6IFdlYkdMUHJvZ3JhbVxuICAgIHByb3RlY3RlZCByZWFkb25seSB2ZXJ0QnVmZjogV2ViR0xCdWZmZXJcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgICAgICBjb25zdCB2ZXJ0QnVmZiA9IGdsLmNyZWF0ZUJ1ZmZlcigpXG4gICAgICAgIGlmICghdmVydEJ1ZmYpIHRocm93IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTCBCdWZmZXIhXCIpXG5cbiAgICAgICAgY29uc3QgcHJnID0gZ2wuY3JlYXRlUHJvZ3JhbSgpXG4gICAgICAgIGlmICghcHJnKSB0aHJvdyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgYSBXZWJHTCBQcm9ncmFtIVwiKVxuXG4gICAgICAgIGNvbnN0IHZlcnRTaGFkZXIgPSBCYXNlUGFpbnRlci5jcmVhdGVTaGFkZXIoXG4gICAgICAgICAgICBnbCxcbiAgICAgICAgICAgIGdsLlZFUlRFWF9TSEFERVIsXG4gICAgICAgICAgICBCYXNlUGFpbnRlci5WRVJUXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZnJhZ1NoYWRlciA9IEJhc2VQYWludGVyLmNyZWF0ZVNoYWRlcihcbiAgICAgICAgICAgIGdsLFxuICAgICAgICAgICAgZ2wuRlJBR01FTlRfU0hBREVSLFxuICAgICAgICAgICAgQmFzZVBhaW50ZXIuRlJBR1xuICAgICAgICApXG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcmcsIHZlcnRTaGFkZXIpXG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcmcsIGZyYWdTaGFkZXIpXG4gICAgICAgIGdsLmxpbmtQcm9ncmFtKHByZylcbiAgICAgICAgdGhpcy5wcmcgPSBwcmdcbiAgICAgICAgdGhpcy52ZXJ0QnVmZiA9IHZlcnRCdWZmXG4gICAgfVxuXG4gICAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHByZywgdmVydEJ1ZmYgfSA9IHRoaXNcbiAgICAgICAgZ2wuZGVsZXRlQnVmZmVyKHZlcnRCdWZmKVxuICAgICAgICBnbC5kZWxldGVQcm9ncmFtKHByZylcbiAgICAgICAgdGhpcy5hY3R1YWxEZXN0cm95KClcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZURhdGFBcnJheSh2ZXJ0ZXhDb3VudDogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiA1KVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcG9rZURhdGEoXG4gICAgICAgIGRhdGE6IEZsb2F0MzJBcnJheSxcbiAgICAgICAgdmVydGV4SW5kZXg6IG51bWJlcixcbiAgICAgICAgYXR0UG9zX1g6IG51bWJlcixcbiAgICAgICAgYXR0UG9zX1k6IG51bWJlcixcbiAgICAgICAgYXR0U2l6ZTogbnVtYmVyLFxuICAgICAgICBhdHRVVl9YOiBudW1iZXIsXG4gICAgICAgIGF0dFVWX1k6IG51bWJlclxuICAgICkge1xuICAgICAgICBsZXQgaW5kZXggPSB2ZXJ0ZXhJbmRleCAqIEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlRcbiAgICAgICAgOyhkYXRhW2luZGV4KytdID0gYXR0UG9zX1gpLFxuICAgICAgICAgICAgKGRhdGFbaW5kZXgrK10gPSBhdHRQb3NfWSksXG4gICAgICAgICAgICAoZGF0YVtpbmRleCsrXSA9IGF0dFNpemUpLFxuICAgICAgICAgICAgKGRhdGFbaW5kZXgrK10gPSBhdHRVVl9YKSxcbiAgICAgICAgICAgIChkYXRhW2luZGV4KytdID0gYXR0VVZfWSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN3YXBEYXRhKGRhdGE6IEZsb2F0MzJBcnJheSwgaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKSB7XG4gICAgICAgIGxldCBwdHJBID0gaW5kZXhBICogQmFzZVBhaW50ZXIuQVRUUklCU19DT1VOVFxuICAgICAgICBsZXQgcHRyQiA9IGluZGV4QiAqIEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlRcbiAgICAgICAgbGV0IHRtcDogbnVtYmVyID0gMFxuICAgICAgICB0bXAgPSBkYXRhW3B0ckFdXG4gICAgICAgIGRhdGFbcHRyQSsrXSA9IGRhdGFbcHRyQl1cbiAgICAgICAgZGF0YVtwdHJCKytdID0gdG1wXG4gICAgICAgIHRtcCA9IGRhdGFbcHRyQV1cbiAgICAgICAgZGF0YVtwdHJBKytdID0gZGF0YVtwdHJCXVxuICAgICAgICBkYXRhW3B0ckIrK10gPSB0bXBcbiAgICAgICAgdG1wID0gZGF0YVtwdHJBXVxuICAgICAgICBkYXRhW3B0ckErK10gPSBkYXRhW3B0ckJdXG4gICAgICAgIGRhdGFbcHRyQisrXSA9IHRtcFxuICAgICAgICB0bXAgPSBkYXRhW3B0ckFdXG4gICAgICAgIGRhdGFbcHRyQSsrXSA9IGRhdGFbcHRyQl1cbiAgICAgICAgZGF0YVtwdHJCKytdID0gdG1wXG4gICAgICAgIHRtcCA9IGRhdGFbcHRyQV1cbiAgICAgICAgZGF0YVtwdHJBKytdID0gZGF0YVtwdHJCXVxuICAgICAgICBkYXRhW3B0ckIrK10gPSB0bXBcbiAgICB9XG5cbiAgICBwdWJsaWMgcHVzaERhdGFBcnJheShkYXRhOiBGbG9hdDMyQXJyYXkpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgdmVydEJ1ZmYgfSA9IHRoaXNcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRCdWZmKVxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuRFlOQU1JQ19EUkFXKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzdGFydCBGaXJzdCB2ZXJ0ZXggaW5kZXggdG8gcHVzaFxuICAgICAqIEBwYXJhbSBlbmQgRmlyc3QgdmVydGV4IGluZGV4IHRvIE5PVCBwdXNoLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXNoRGF0YVN1YkFycmF5KGRhdGE6IEZsb2F0MzJBcnJheSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgdmVydEJ1ZmYgfSA9IHRoaXNcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRCdWZmKVxuICAgICAgICBjb25zdCBOID0gQmFzZVBhaW50ZXIuQVRUUklCU19DT1VOVFxuICAgICAgICBjb25zdCBzdWJEYXRhID0gZGF0YS5zdWJhcnJheShzdGFydCAqIE4sIGVuZCAqIE4pXG4gICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoXG4gICAgICAgICAgICBnbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgICBzdGFydCAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIE4sXG4gICAgICAgICAgICBzdWJEYXRhXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwdWJsaWMgJHVuaVNocmluayh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHByZyB9ID0gdGhpc1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmcsIFwidW5pU2hyaW5rXCIpXG4gICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpXG4gICAgfVxuXG4gICAgcHVibGljICR1bmlTY3JlZW4oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJ1bmlTY3JlZW5cIilcbiAgICAgICAgZ2wudW5pZm9ybTJmKGxvY2F0aW9uLCB4LCB5KVxuICAgIH1cblxuICAgIHB1YmxpYyAkdW5pVGV4dHVyZSh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnIH0gPSB0aGlzXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByZywgXCJ1bmlUZXh0dXJlXCIpXG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpXG4gICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgMClcbiAgICB9XG5cbiAgICBwdWJsaWMgcGFpbnQodGltZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHByZyB9ID0gdGhpc1xuICAgICAgICBnbC51c2VQcm9ncmFtKHByZylcbiAgICAgICAgY29uc3QgQlBFID0gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlQgKiBCUEVcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydEJ1ZmYpXG4gICAgICAgIC8vIGF0dFBvc1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgwKVxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKDAsIDIsIGdsLkZMT0FULCBmYWxzZSwgc3RyaWRlLCAwICogQlBFKVxuICAgICAgICAvLyBhdHRTaXplXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDEpXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoMSwgMSwgZ2wuRkxPQVQsIGZhbHNlLCBzdHJpZGUsIDIgKiBCUEUpXG4gICAgICAgIC8vIGF0dFVWXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDIpXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoMiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBzdHJpZGUsIDMgKiBCUEUpXG4gICAgICAgIHRoaXMuYWN0dWFsUGFpbnQodGltZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGFsbCB0aGUgcGFpbnRlcnMgaGF2ZSB0aGVpclxuICAgICAqIGBwYWludCgpYCBtZXRob2QgYmVlbiBjYWxsZWQuXG4gICAgICogSXQgZGVhbHMgd2l0aCBldmVyeXRoaW5nIHRha2luZyB0aW1lIGFuZCBub3QgZHJhd2luZyBhbnl0aGluZy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgYW5pbSh0aW1lOiBudW1iZXIpOiB2b2lkXG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWN0dWFsUGFpbnQodGltZTogbnVtYmVyKTogdm9pZFxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGFjdHVhbERlc3Ryb3koKTogdm9pZFxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlU2hhZGVyKFxuICAgICAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgICAgICB0eXBlOiBudW1iZXIsXG4gICAgICAgIGNvZGU6IHN0cmluZ1xuICAgICkge1xuICAgICAgICBjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSlcbiAgICAgICAgaWYgKCFzaGFkZXIpIHRocm93IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTCBTaGFkZXIhXCIpXG5cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgY29kZSlcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpXG4gICAgICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb2RlKVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBcIkFuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyOiBcIixcbiAgICAgICAgICAgICAgICBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcilcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgIGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKSA/P1xuICAgICAgICAgICAgICAgICAgICBcIlVua25vdyBlcnJvciB3aGlsZSBjb21waWxpbmcgdGhlIHNoYWRlciFcIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGFkZXJcbiAgICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0LCBTcHJpdGUgfSBmcm9tIFwiLi9zcHJpdGUtcGFpbnRlclwiIiwiaW1wb3J0IHsgTUFSR0lOIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBjcmVhdGVUZXh0dXJlRnJvbUltYWdlIH0gZnJvbSBcIi4uLy4uL3dlYmdsL3RleHR1cmVcIlxuaW1wb3J0IEJhc2VTcHJpdGVQYWludGVyIGZyb20gXCIuL2Jhc2Utc3ByaXRlLXBhaW50ZXJcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFNwcml0ZSB7XG4gICAgLyoqIENvbHVtbiBvZiB0aGlzIHNwcml0ZSBpbiB0aGUgYXRsYXMgKi9cbiAgICByZWFkb25seSBjb2w6IG51bWJlclxuICAgIHJlYWRvbmx5IHJvdzogbnVtYmVyXG4gICAgcmVhZG9ubHkgeDogbnVtYmVyXG4gICAgcmVhZG9ubHkgeTogbnVtYmVyXG4gICAgcmVhZG9ubHkgc2l6ZTogbnVtYmVyXG59XG5cbmNvbnN0IEFUTEFTX1NJREUgPSAxIC8gOFxuY29uc3QgU0hSSU5LID0gMSAtIE1BUkdJTlxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwcml0ZVBhaW50ZXIgZXh0ZW5kcyBCYXNlU3ByaXRlUGFpbnRlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0dXJlOiBXZWJHTFRleHR1cmVcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRhdGE6IEZsb2F0MzJBcnJheVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3ByaXRlczogU3ByaXRlW11cbiAgICApIHtcbiAgICAgICAgc3VwZXIoZ2wpXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IGNyZWF0ZVRleHR1cmVGcm9tSW1hZ2UoZ2wsIGltYWdlKVxuICAgICAgICB0aGlzLmRhdGEgPSBTcHJpdGVQYWludGVyLmNyZWF0ZURhdGFBcnJheShzcHJpdGVzLmxlbmd0aClcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKClcbiAgICB9XG5cbiAgICBwdWJsaWMgYW5pbSh0aW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKClcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWN0dWFsUGFpbnQodGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBnbC5jYW52YXNcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKVxuICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpXG4gICAgICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpXG4gICAgICAgIHRoaXMuJHVuaVRleHR1cmUodGhpcy50ZXh0dXJlKVxuICAgICAgICB0aGlzLiR1bmlTaHJpbmsoU0hSSU5LKVxuICAgICAgICB0aGlzLiR1bmlTY3JlZW4od2lkdGgsIGhlaWdodClcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIHRoaXMuc3ByaXRlcy5sZW5ndGgpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFjdHVhbERlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcbiAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLnRleHR1cmUpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRhKCkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXNcbiAgICAgICAgbGV0IHZlcnRleEluZGV4ID0gMFxuICAgICAgICBmb3IgKGNvbnN0IHNwcml0ZSBvZiB0aGlzLnNwcml0ZXMpIHtcbiAgICAgICAgICAgIFNwcml0ZVBhaW50ZXIucG9rZURhdGEoXG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhJbmRleCsrLFxuICAgICAgICAgICAgICAgIHNwcml0ZS54LFxuICAgICAgICAgICAgICAgIHNwcml0ZS55LFxuICAgICAgICAgICAgICAgIHNwcml0ZS5zaXplLFxuICAgICAgICAgICAgICAgIHNwcml0ZS5jb2wgKiBBVExBU19TSURFLFxuICAgICAgICAgICAgICAgIHNwcml0ZS5yb3cgKiBBVExBU19TSURFXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdXNoRGF0YUFycmF5KGRhdGEpXG4gICAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIGZpbGUgaGFzIGJlZW4gZ2VuZXJhdGdlZCBhdXRvbWF0aWNhbGx5IG9uIDIwMjItMDItMTFUMTA6MjM6NTYuNjQ3WlxuICogUGxlYXNlIGV4dGVuZHMgdGhpcyBhYnN0cmFjdCBjbGFzcyB0byBoYXZlIGl0IHdvcmsuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEJhc2VQYWludGVyIHtcbiAgICBwcml2YXRlIHN0YXRpYyBWRVJUID0gYHVuaWZvcm0gZmxvYXQgdW5pVGltZTtcbi8vIFRleHR1cmUgdGlsZXMgcGVyIG1zZWNcbnVuaWZvcm0gZmxvYXQgdW5pU3BlZWQ7XG4vLyB1bmlTaHJpbmsgPSAxLjAgLSBNQVJHSU5cbnVuaWZvcm0gZmxvYXQgdW5pU2hyaW5rO1xuLy8gU2NyZWVuIHdpZHRoIGFuZCBoZWlnaHRcbnVuaWZvcm0gdmVjMiB1bmlTY3JlZW47XG5cbi8vIHgsIHksIFdcbmF0dHJpYnV0ZSB2ZWMzIGF0dFBvcztcbmF0dHJpYnV0ZSB2ZWMyIGF0dFVWO1xuXG52YXJ5aW5nIHZlYzIgdmFyVVY7XG5cbnZvaWQgbWFpbigpIHtcbiAgICBmbG9hdCB3aWR0aCA9IHVuaVNjcmVlbi54ICogKDEuMCAtIHVuaVNocmluayk7XG4gICAgZmxvYXQgaGVpZ2h0ID0gdW5pU2NyZWVuLnk7XG4gICAgdmFyVVYgPSBhdHRVViAqIHZlYzIoaGVpZ2h0IC8gd2lkdGgsIDAuNSk7XG4gICAgdmFyVVYueCAtPSB1bmlUaW1lICogdW5pU3BlZWQ7XG4gICAgZmxvYXQgeCA9IGF0dFBvcy54O1xuICAgIGZsb2F0IHkgPSBhdHRQb3MueTtcbiAgICBmbG9hdCB3ID0gYXR0UG9zLno7XG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KCB4LCB5LCAxLjAsIHcgKTtcbn1gXG4gICAgcHJpdmF0ZSBzdGF0aWMgRlJBRyA9IGBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxudW5pZm9ybSBzYW1wbGVyMkQgdW5pVGV4dHVyZTtcbnZhcnlpbmcgdmVjMiB2YXJVVjtcblxudm9pZCBtYWluKCkge1xuICB2ZWMzIGNvbG9yID0gdGV4dHVyZTJEKCB1bmlUZXh0dXJlLCB2YXJVViApLnJnYjtcbiAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IsIDEuMCApO1xufVxuYFxuICAgIHByaXZhdGUgc3RhdGljIEFUVFJJQlNfQ09VTlQgPSA1XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHByZzogV2ViR0xQcm9ncmFtXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHZlcnRCdWZmOiBXZWJHTEJ1ZmZlclxuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkb25seSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHZlcnRCdWZmID0gZ2wuY3JlYXRlQnVmZmVyKClcbiAgICAgICAgaWYgKCF2ZXJ0QnVmZikgdGhyb3cgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMIEJ1ZmZlciFcIilcblxuICAgICAgICBjb25zdCBwcmcgPSBnbC5jcmVhdGVQcm9ncmFtKClcbiAgICAgICAgaWYgKCFwcmcpIHRocm93IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBhIFdlYkdMIFByb2dyYW0hXCIpXG5cbiAgICAgICAgY29uc3QgdmVydFNoYWRlciA9IEJhc2VQYWludGVyLmNyZWF0ZVNoYWRlcihcbiAgICAgICAgICAgIGdsLFxuICAgICAgICAgICAgZ2wuVkVSVEVYX1NIQURFUixcbiAgICAgICAgICAgIEJhc2VQYWludGVyLlZFUlRcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBmcmFnU2hhZGVyID0gQmFzZVBhaW50ZXIuY3JlYXRlU2hhZGVyKFxuICAgICAgICAgICAgZ2wsXG4gICAgICAgICAgICBnbC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICAgICAgICBCYXNlUGFpbnRlci5GUkFHXG4gICAgICAgIClcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByZywgdmVydFNoYWRlcilcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByZywgZnJhZ1NoYWRlcilcbiAgICAgICAgZ2wubGlua1Byb2dyYW0ocHJnKVxuICAgICAgICB0aGlzLnByZyA9IHByZ1xuICAgICAgICB0aGlzLnZlcnRCdWZmID0gdmVydEJ1ZmZcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnLCB2ZXJ0QnVmZiB9ID0gdGhpc1xuICAgICAgICBnbC5kZWxldGVCdWZmZXIodmVydEJ1ZmYpXG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0ocHJnKVxuICAgICAgICB0aGlzLmFjdHVhbERlc3Ryb3koKVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRGF0YUFycmF5KHZlcnRleENvdW50OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDUpXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBwb2tlRGF0YShcbiAgICAgICAgZGF0YTogRmxvYXQzMkFycmF5LFxuICAgICAgICB2ZXJ0ZXhJbmRleDogbnVtYmVyLFxuICAgICAgICBhdHRQb3NfWDogbnVtYmVyLFxuICAgICAgICBhdHRQb3NfWTogbnVtYmVyLFxuICAgICAgICBhdHRQb3NfWjogbnVtYmVyLFxuICAgICAgICBhdHRVVl9YOiBudW1iZXIsXG4gICAgICAgIGF0dFVWX1k6IG51bWJlclxuICAgICkge1xuICAgICAgICBsZXQgaW5kZXggPSB2ZXJ0ZXhJbmRleCAqIEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlRcbiAgICAgICAgOyhkYXRhW2luZGV4KytdID0gYXR0UG9zX1gpLFxuICAgICAgICAgICAgKGRhdGFbaW5kZXgrK10gPSBhdHRQb3NfWSksXG4gICAgICAgICAgICAoZGF0YVtpbmRleCsrXSA9IGF0dFBvc19aKSxcbiAgICAgICAgICAgIChkYXRhW2luZGV4KytdID0gYXR0VVZfWCksXG4gICAgICAgICAgICAoZGF0YVtpbmRleCsrXSA9IGF0dFVWX1kpXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzd2FwRGF0YShkYXRhOiBGbG9hdDMyQXJyYXksIGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikge1xuICAgICAgICBsZXQgcHRyQSA9IGluZGV4QSAqIEJhc2VQYWludGVyLkFUVFJJQlNfQ09VTlRcbiAgICAgICAgbGV0IHB0ckIgPSBpbmRleEIgKiBCYXNlUGFpbnRlci5BVFRSSUJTX0NPVU5UXG4gICAgICAgIGxldCB0bXA6IG51bWJlciA9IDBcbiAgICAgICAgdG1wID0gZGF0YVtwdHJBXVxuICAgICAgICBkYXRhW3B0ckErK10gPSBkYXRhW3B0ckJdXG4gICAgICAgIGRhdGFbcHRyQisrXSA9IHRtcFxuICAgICAgICB0bXAgPSBkYXRhW3B0ckFdXG4gICAgICAgIGRhdGFbcHRyQSsrXSA9IGRhdGFbcHRyQl1cbiAgICAgICAgZGF0YVtwdHJCKytdID0gdG1wXG4gICAgICAgIHRtcCA9IGRhdGFbcHRyQV1cbiAgICAgICAgZGF0YVtwdHJBKytdID0gZGF0YVtwdHJCXVxuICAgICAgICBkYXRhW3B0ckIrK10gPSB0bXBcbiAgICAgICAgdG1wID0gZGF0YVtwdHJBXVxuICAgICAgICBkYXRhW3B0ckErK10gPSBkYXRhW3B0ckJdXG4gICAgICAgIGRhdGFbcHRyQisrXSA9IHRtcFxuICAgICAgICB0bXAgPSBkYXRhW3B0ckFdXG4gICAgICAgIGRhdGFbcHRyQSsrXSA9IGRhdGFbcHRyQl1cbiAgICAgICAgZGF0YVtwdHJCKytdID0gdG1wXG4gICAgfVxuXG4gICAgcHVibGljIHB1c2hEYXRhQXJyYXkoZGF0YTogRmxvYXQzMkFycmF5KSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHZlcnRCdWZmIH0gPSB0aGlzXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0QnVmZilcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGRhdGEsIGdsLlNUQVRJQ19EUkFXKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzdGFydCBGaXJzdCB2ZXJ0ZXggaW5kZXggdG8gcHVzaFxuICAgICAqIEBwYXJhbSBlbmQgRmlyc3QgdmVydGV4IGluZGV4IHRvIE5PVCBwdXNoLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXNoRGF0YVN1YkFycmF5KGRhdGE6IEZsb2F0MzJBcnJheSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgdmVydEJ1ZmYgfSA9IHRoaXNcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRCdWZmKVxuICAgICAgICBjb25zdCBOID0gQmFzZVBhaW50ZXIuQVRUUklCU19DT1VOVFxuICAgICAgICBjb25zdCBzdWJEYXRhID0gZGF0YS5zdWJhcnJheShzdGFydCAqIE4sIGVuZCAqIE4pXG4gICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoXG4gICAgICAgICAgICBnbC5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgICBzdGFydCAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIE4sXG4gICAgICAgICAgICBzdWJEYXRhXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwdWJsaWMgJHVuaVNocmluayh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHByZyB9ID0gdGhpc1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmcsIFwidW5pU2hyaW5rXCIpXG4gICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpXG4gICAgfVxuXG4gICAgcHVibGljICR1bmlTcGVlZCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgZ2wsIHByZyB9ID0gdGhpc1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcmcsIFwidW5pU3BlZWRcIilcbiAgICAgICAgZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgJHVuaVRpbWUodmFsdWU6IG51bWJlcikge1xuICAgICAgICBjb25zdCB7IGdsLCBwcmcgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcInVuaVRpbWVcIilcbiAgICAgICAgZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgJHVuaVNjcmVlbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCB7IGdsLCBwcmcgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcInVuaVNjcmVlblwiKVxuICAgICAgICBnbC51bmlmb3JtMmYobG9jYXRpb24sIHgsIHkpXG4gICAgfVxuXG4gICAgcHVibGljICR1bmlUZXh0dXJlKHRleHR1cmU6IFdlYkdMVGV4dHVyZSkge1xuICAgICAgICBjb25zdCB7IGdsLCBwcmcgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBcInVuaVRleHR1cmVcIilcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMClcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSlcbiAgICAgICAgZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCAwKVxuICAgIH1cblxuICAgIHB1YmxpYyBwYWludCh0aW1lOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcHJnIH0gPSB0aGlzXG4gICAgICAgIGdsLnVzZVByb2dyYW0ocHJnKVxuICAgICAgICBjb25zdCBCUEUgPSBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlRcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gQmFzZVBhaW50ZXIuQVRUUklCU19DT1VOVCAqIEJQRVxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0QnVmZilcbiAgICAgICAgLy8gYXR0UG9zXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDApXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoMCwgMywgZ2wuRkxPQVQsIGZhbHNlLCBzdHJpZGUsIDAgKiBCUEUpXG4gICAgICAgIC8vIGF0dFVWXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDEpXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoMSwgMiwgZ2wuRkxPQVQsIGZhbHNlLCBzdHJpZGUsIDMgKiBCUEUpXG4gICAgICAgIHRoaXMuYWN0dWFsUGFpbnQodGltZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGFsbCB0aGUgcGFpbnRlcnMgaGF2ZSB0aGVpclxuICAgICAqIGBwYWludCgpYCBtZXRob2QgYmVlbiBjYWxsZWQuXG4gICAgICogSXQgZGVhbHMgd2l0aCBldmVyeXRoaW5nIHRha2luZyB0aW1lIGFuZCBub3QgZHJhd2luZyBhbnl0aGluZy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgYW5pbSh0aW1lOiBudW1iZXIpOiB2b2lkXG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWN0dWFsUGFpbnQodGltZTogbnVtYmVyKTogdm9pZFxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGFjdHVhbERlc3Ryb3koKTogdm9pZFxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlU2hhZGVyKFxuICAgICAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgICAgICB0eXBlOiBudW1iZXIsXG4gICAgICAgIGNvZGU6IHN0cmluZ1xuICAgICkge1xuICAgICAgICBjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSlcbiAgICAgICAgaWYgKCFzaGFkZXIpIHRocm93IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTCBTaGFkZXIhXCIpXG5cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgY29kZSlcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpXG4gICAgICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb2RlKVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBcIkFuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyOiBcIixcbiAgICAgICAgICAgICAgICBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcilcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgIGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKSA/P1xuICAgICAgICAgICAgICAgICAgICBcIlVua25vdyBlcnJvciB3aGlsZSBjb21waWxpbmcgdGhlIHNoYWRlciFcIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGFkZXJcbiAgICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4vd2FsbC1wYWludGVyXCJcblxuIiwiaW1wb3J0IHsgTUFSR0lOLCBTUEVFRCB9IGZyb20gXCIuLy4uLy4uL2NvbnN0YW50c1wiXG5pbXBvcnQgQmFzZVdhbGxQYWludGVyIGZyb20gXCIuL2Jhc2Utd2FsbC1wYWludGVyXCJcbmltcG9ydCB7IGNyZWF0ZVRleHR1cmVGcm9tSW1hZ2VSZXBlYXQgfSBmcm9tIFwiLi4vLi4vd2ViZ2wvdGV4dHVyZVwiXG5cbmNvbnN0IFNIUklOSyA9IDEgLSBNQVJHSU5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2FsbFBhaW50ZXIgZXh0ZW5kcyBCYXNlV2FsbFBhaW50ZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGV4dHVyZTogV2ViR0xUZXh0dXJlXG4gICAgcHJpdmF0ZSByZWFkb25seSBzcGVlZFxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZ2wpXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IGNyZWF0ZVRleHR1cmVGcm9tSW1hZ2VSZXBlYXQoZ2wsIGltYWdlKVxuICAgICAgICBjb25zdCBkYXRhID0gV2FsbFBhaW50ZXIuY3JlYXRlRGF0YUFycmF5KDEyKVxuICAgICAgICBjb25zdCBwZXJzcGVjdGl2ZSA9IDEuMlxuICAgICAgICBjb25zdCBXYSA9IDFcbiAgICAgICAgY29uc3QgV2IgPSBwZXJzcGVjdGl2ZVxuICAgICAgICBjb25zdCBYYSA9IDFcbiAgICAgICAgY29uc3QgWGIgPSBTSFJJTksgKiBwZXJzcGVjdGl2ZVxuICAgICAgICBjb25zdCBZYSA9IHBlcnNwZWN0aXZlXG4gICAgICAgIGNvbnN0IFliID0gWWFcbiAgICAgICAgY29uc3QgVTAgPSAwXG4gICAgICAgIGNvbnN0IFUxID0gMVxuICAgICAgICBjb25zdCBWMCA9IDBcbiAgICAgICAgY29uc3QgVjEgPSAxXG4gICAgICAgIGxldCBpZHggPSAwXG4gICAgICAgIFdhbGxQYWludGVyLnBva2VEYXRhKGRhdGEsIGlkeCsrLCAtWGEsICtZYSwgV2EsIFUxLCBWMClcbiAgICAgICAgV2FsbFBhaW50ZXIucG9rZURhdGEoZGF0YSwgaWR4KyssIC1YYiwgK1liLCBXYiwgVTEsIFYxKVxuICAgICAgICBXYWxsUGFpbnRlci5wb2tlRGF0YShkYXRhLCBpZHgrKywgLVhhLCAtWWEsIFdhLCBVMCwgVjApXG4gICAgICAgIFdhbGxQYWludGVyLnBva2VEYXRhKGRhdGEsIGlkeCsrLCAtWGIsICtZYiwgV2IsIFUxLCBWMSlcbiAgICAgICAgV2FsbFBhaW50ZXIucG9rZURhdGEoZGF0YSwgaWR4KyssIC1YYSwgLVlhLCBXYSwgVTAsIFYwKVxuICAgICAgICBXYWxsUGFpbnRlci5wb2tlRGF0YShkYXRhLCBpZHgrKywgLVhiLCAtWWIsIFdiLCBVMCwgVjEpXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFdhbGxQYWludGVyLnBva2VEYXRhKGRhdGEsIGlkeCsrLCBYYSwgK1lhLCBXYSwgVTEsIFYwKVxuICAgICAgICBXYWxsUGFpbnRlci5wb2tlRGF0YShkYXRhLCBpZHgrKywgWGIsICtZYiwgV2IsIFUxLCBWMSlcbiAgICAgICAgV2FsbFBhaW50ZXIucG9rZURhdGEoZGF0YSwgaWR4KyssIFhhLCAtWWEsIFdhLCBVMCwgVjApXG4gICAgICAgIFdhbGxQYWludGVyLnBva2VEYXRhKGRhdGEsIGlkeCsrLCBYYiwgK1liLCBXYiwgVTEsIFYxKVxuICAgICAgICBXYWxsUGFpbnRlci5wb2tlRGF0YShkYXRhLCBpZHgrKywgWGEsIC1ZYSwgV2EsIFUwLCBWMClcbiAgICAgICAgV2FsbFBhaW50ZXIucG9rZURhdGEoZGF0YSwgaWR4KyssIFhiLCAtWWIsIFdiLCBVMCwgVjEpXG4gICAgICAgIHRoaXMucHVzaERhdGFBcnJheShkYXRhKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5zdWJhcnJheShpICogNSwgKGkgKyAxKSAqIDUpKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3BlZWQgPSAoU1BFRUQgKiAoMSAtIE1BUkdJTikpIC8gTUFSR0lOXG4gICAgfVxuXG4gICAgYW5pbSh0aW1lOiBudW1iZXIpIHt9XG5cbiAgICBwcm90ZWN0ZWQgYWN0dWFsUGFpbnQodGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBnbC5jYW52YXNcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORClcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKVxuICAgICAgICB0aGlzLiR1bmlUZXh0dXJlKHRoaXMudGV4dHVyZSlcbiAgICAgICAgdGhpcy4kdW5pU2NyZWVuKHdpZHRoLCBoZWlnaHQpXG4gICAgICAgIHRoaXMuJHVuaVNocmluayhTSFJJTkspXG4gICAgICAgIHRoaXMuJHVuaVNwZWVkKHRoaXMuc3BlZWQpXG4gICAgICAgIHRoaXMuJHVuaVRpbWUodGltZSlcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDEyKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBhY3R1YWxEZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGdsIH0gPSB0aGlzXG4gICAgICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy50ZXh0dXJlKVxuICAgIH1cbn1cbiIsImltcG9ydCB7IE1PVVNFX0NPVU5UIH0gZnJvbSBcIi4vY29uc3RhbnRzXCJcbmltcG9ydCBDYXQgZnJvbSBcIi4vYWdlbnRzL2NhdFwiXG5pbXBvcnQgTW91c2UgZnJvbSBcIi4vYWdlbnRzL21vdXNlXCJcbmltcG9ydCBQYWludGVyIGZyb20gXCIuL3BhaW50ZXJzL3BhaW50ZXJcIlxuaW1wb3J0IFNwcml0ZVBhaW50ZXIgZnJvbSBcIi4vcGFpbnRlcnMvc3ByaXRlXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVudGltZSBpbXBsZW1lbnRzIFBhaW50ZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFpbnRlcjogU3ByaXRlUGFpbnRlclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2F0OiBDYXRcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1pY2U6IE1vdXNlW10gPSBbXVxuXG4gICAgcHJpdmF0ZSBsYXN0VGltZSA9IDBcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgICAgIHNwcml0ZXNUZXh0dXJlOiBIVE1MSW1hZ2VFbGVtZW50XG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGNhdCA9IG5ldyBDYXQoKVxuICAgICAgICB0aGlzLmNhdCA9IGNhdFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1PVVNFX0NPVU5UOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubWljZS5wdXNoKG5ldyBNb3VzZShpLCBNT1VTRV9DT1VOVCkpXG4gICAgICAgIH1cbiAgICAgICAgZ2wuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBjYXQub25Qb2ludGVyTW92ZSlcbiAgICAgICAgZ2wuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBjYXQub25Qb2ludGVyTW92ZSlcbiAgICAgICAgY29uc3Qgc3ByaXRlUGFpbnRlciA9IG5ldyBTcHJpdGVQYWludGVyKGdsLCBzcHJpdGVzVGV4dHVyZSwgW1xuICAgICAgICAgICAgLi4udGhpcy5taWNlLFxuICAgICAgICAgICAgY2F0LFxuICAgICAgICBdKVxuICAgICAgICB0aGlzLnBhaW50ZXIgPSBzcHJpdGVQYWludGVyXG4gICAgfVxuXG4gICAgcGFpbnQodGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMucGFpbnRlci5wYWludCh0aW1lKVxuICAgIH1cblxuICAgIGFuaW0odGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RUaW1lID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB0aW1lIC0gdGhpcy5sYXN0VGltZVxuICAgICAgICAgICAgdGhpcy5jYXQuYW5pbShkZWx0YSlcbiAgICAgICAgICAgIGZvciAoY29uc3QgbW91c2Ugb2YgdGhpcy5taWNlKSB7XG4gICAgICAgICAgICAgICAgbW91c2UuYW5pbShkZWx0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFpbnRlci5hbmltKHRpbWUpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHRpbWVcbiAgICB9XG5cbiAgICBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdsLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5jYXQub25Qb2ludGVyTW92ZSlcbiAgICAgICAgdGhpcy5nbC5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMuY2F0Lm9uUG9pbnRlck1vdmUpXG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHJhbmQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbWluICsgKG1heCAtIG1pbikgKiBNYXRoLnJhbmRvbSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCh2OiBudW1iZXIsIG1pbj0wLCBtYXg9IDAuOTk5OTk5KSB7XG4gICAgaWYgKHYgPCBtaW4pIHJldHVybiBtaW5cbiAgICBpZiAodiA+IG1heCkgcmV0dXJuIG1heFxuICAgIHJldHVybiB2XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoZGF0YTogdW5rbm93bik6IGRhdGEgaXMgeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE9iamVjdChcbiAgICBkYXRhOiB1bmtub3duLFxuICAgIG5hbWUgPSBcImRhdGFcIlxuKTogYXNzZXJ0cyBkYXRhIGlzIHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9IHtcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKVxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgIGAke25hbWV9IHdhcyBleHBlY3RlZCB0byBiZSBhbiBvYmplY3QgYnV0IHdlIGdvdCAke3R5cGVvZiBkYXRhfSFgXG4gICAgICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKGRhdGE6IHVua25vd24pOiBkYXRhIGlzIHN0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRTdHJpbmcoXG4gICAgZGF0YTogdW5rbm93bixcbiAgICBuYW1lID0gXCJkYXRhXCJcbik6IGFzc2VydHMgZGF0YSBpcyBzdHJpbmcge1xuICAgIGlmICghaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBgJHtuYW1lfSB3YXMgZXhwZWN0ZWQgdG8gYmUgYSBzdHJpbmcgYnV0IHdlIGdvdCAke3R5cGVvZiBkYXRhfSFgXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJbWFnZSggICAgZGF0YTogdW5rbm93bixcbiAgICBuYW1lID0gXCJkYXRhXCJcbik6IGFzc2VydHMgZGF0YSBpcyBIVE1MSW1hZ2VFbGVtZW50IHtcbiAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBgJHtuYW1lfSB3YXMgZXhwZWN0ZWQgdG8gYmUgYW4gSW1hZ2UgYnV0IHdlIGdvdCAke3R5cGVvZiBkYXRhfSFgXG4gICAgICAgIClcbiAgICB9XG59XG5cbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLi9zY2VuZVwiIiwiZXhwb3J0IGludGVyZmFjZSBQYWludGVyIHtcbiAgICBwYWludCh0aW1lOiBudW1iZXIpOiB2b2lkXG4gICAgYW5pbSh0aW1lOiBudW1iZXIpOiB2b2lkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dFxuICAgIHByaXZhdGUgcGFpbnRlcnM6IFBhaW50ZXJbXSA9IFtdXG4gICAgcHJpdmF0ZSBwbGF5aW5nID0gZmFsc2VcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICBjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIilcbiAgICAgICAgaWYgKCFnbCkgdGhyb3cgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMIENvbnRleHQhXCIpXG5cbiAgICAgICAgdGhpcy5nbCA9IGdsXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudGFyZ2V0ID09PSBjYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShjYW52YXMpXG4gICAgfVxuXG4gICAgcHVibGljIHNldFBhaW50ZXJzKHBhaW50ZXJzOiBQYWludGVyW10pIHtcbiAgICAgICAgdGhpcy5wYWludGVycyA9IHBhaW50ZXJzXG4gICAgfVxuXG4gICAgcHVibGljIHBhaW50ID0gKHRpbWU6IG51bWJlcikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHBhaW50ZXIgb2YgdGhpcy5wYWludGVycykge1xuICAgICAgICAgICAgcGFpbnRlci5wYWludCh0aW1lKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFuaW0gPSAodGltZTogbnVtYmVyKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcGFpbnRlciBvZiB0aGlzLnBhaW50ZXJzKSB7XG4gICAgICAgICAgICBwYWludGVyLmFuaW0odGltZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy5wbGF5aW5nKSByZXR1cm5cblxuICAgICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9ICh0aW1lOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFpbnQodGltZSlcbiAgICAgICAgICAgIHRoaXMuYW5pbSh0aW1lKVxuICAgICAgICAgICAgaWYgKHRoaXMucGxheWluZykgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb24pXG4gICAgfVxuXG4gICAgcHVibGljIHN0b3AoKSB7XG4gICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlXG4gICAgfVxuXG4gICAgcHVibGljIHJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2wsIGNhbnZhcyB9ID0gdGhpc1xuICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIGAke3dpZHRofWApXG4gICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGAke2hlaWdodH1gKVxuICAgICAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodClcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi90ZXh0dXJlXCJcbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBXZWJHTFRleHR1cmUge1xuICAgIGNvbnN0IHRleCA9IGdsLmNyZWF0ZVRleHR1cmUoKVxuICAgIGlmICghdGV4KSB0aHJvdyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0wgdGV4dHVyZSFcIilcblxuICAgIHJldHVybiB0ZXhcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVGcm9tSW1hZ2UoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcbiAgICBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MVmlkZW9FbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnRcbik6IFdlYkdMVGV4dHVyZSB7XG4gICAgY29uc3QgdGV4ID0gY3JlYXRlVGV4dHVyZShnbClcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSlcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKVxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUilcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGltZylcbiAgICByZXR1cm4gdGV4XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXh0dXJlRnJvbUltYWdlUmVwZWF0KFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgaW1nOiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTFZpZGVvRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50XG4pOiBXZWJHTFRleHR1cmUge1xuICAgIGNvbnN0IHRleCA9IGNyZWF0ZVRleHR1cmUoZ2wpXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4KVxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLlJFUEVBVClcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5SRVBFQVQpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUilcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKVxuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgaW1nKVxuICAgIHJldHVybiB0ZXhcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHR1cmVDbGFtcFRvRWRnZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgIHRleDogV2ViR0xUZXh0dXJlXG4pIHtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSlcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dHVyZUNsYW1wVG9FZGdlSG9yaXpvbnRhbChcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgIHRleDogV2ViR0xUZXh0dXJlXG4pIHtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHR1cmVDbGFtcFRvRWRnZVZlcnRpY2FsKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXG4gICAgdGV4OiBXZWJHTFRleHR1cmVcbikge1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleClcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dHVyZVJlcGVhdChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0ZXg6IFdlYkdMVGV4dHVyZSkge1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleClcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5SRVBFQVQpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dHVyZVJlcGVhdEhvcml6b250YWwoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcbiAgICB0ZXg6IFdlYkdMVGV4dHVyZVxuKSB7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4KVxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLlJFUEVBVClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHR1cmVSZXBlYXRWZXJ0aWNhbChcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxuICAgIHRleDogV2ViR0xUZXh0dXJlXG4pIHtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpXG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKVxufVxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiY29sIiwicm93IiwieCIsInkiLCJzaXplIiwiQ09MVU1OUyIsIm9uUG9pbnRlck1vdmUiLCJldmVudCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJwZXJjZW50IiwiY2xhbXAiLCJjbGllbnRYIiwiTWF0aCIsImZsb29yIiwiYW5pbSIsImRlbHRhIiwic2hpZnQiLCJtYXgiLCJtaW4iLCJTUFJFQUQiLCJTUEVFRCIsImFicyIsIlRPUCIsInNuYXAiLCJyYW5kIiwic3BlZWQiLCJhc3NldHNVUkxzIiwib25Qcm9ncmVzcyIsImFzc2V0cyIsImlkcyIsIk9iamVjdCIsImtleXMiLCJmZXRjaEFzc2V0IiwiYXNzZXQiLCJsb2FkZWRBdWRpbyIsIlNldCIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwiaGFzRXh0ZW5zaW9uIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsIm9ubG9hZCIsIm9uZXJyb3IiLCJleCIsImNvbnNvbGUiLCJlcnJvciIsInNyYyIsInNsb3QiLCJoYXMiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCIsImxvZyIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwidGV4dCIsIm5hbWUiLCJleHRlbnNpb25zIiwiZXh0IiwiZW5kc1dpdGgiLCJNQVJHSU4iLCJNT1VTRV9DT1VOVCIsIkFTU0VUUyIsImZsb29yVGV4dHVyZSIsIndhbGxUZXh0dXJlIiwic3ByaXRlc1RleHR1cmUiLCJwcm9ncmVzcyIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlUHJvZ3Jlc3MiLCJmZXRjaEFzc2V0cyIsInZhbHVlIiwiY2FudmFzIiwic3RhcnRBcHBsaWNhdGlvbiIsImRpdiIsInNldFByb3BlcnR5IiwiY2xhc3NMaXN0IiwiYm9keSIsInJlbW92ZVNwbGFzaFNjcmVlbiIsInN0YXJ0IiwiYXNzZXJ0SW1hZ2UiLCJzY2VuZSIsInJ1bnRpbWUiLCJnbCIsInNldFBhaW50ZXJzIiwicGxheSIsIlNIUklOSyIsImltYWdlIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmVGcm9tSW1hZ2VSZXBlYXQiLCJCYWNrZ3JvdW5kUGFpbnRlciIsImNyZWF0ZURhdGFBcnJheSIsInBva2VEYXRhIiwicHVzaERhdGFBcnJheSIsInRpbWUiLCJhY3R1YWxQYWludCIsImhlaWdodCIsImRpc2FibGUiLCJCTEVORCIsIkRFUFRIX1RFU1QiLCIkdW5pVGV4dHVyZSIsIiR1bmlTY3JlZW4iLCIkdW5pU2hyaW5rIiwiJHVuaVNwZWVkIiwiJHVuaVRpbWUiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVfU1RSSVAiLCJhY3R1YWxEZXN0cm95IiwiZGVsZXRlVGV4dHVyZSIsInZlcnRCdWZmIiwiY3JlYXRlQnVmZmVyIiwicHJnIiwiY3JlYXRlUHJvZ3JhbSIsInZlcnRTaGFkZXIiLCJCYXNlUGFpbnRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJWRVJUIiwiZnJhZ1NoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsIkZSQUciLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImRlc3Ryb3kiLCJkZWxldGVCdWZmZXIiLCJkZWxldGVQcm9ncmFtIiwidmVydGV4Q291bnQiLCJGbG9hdDMyQXJyYXkiLCJ2ZXJ0ZXhJbmRleCIsImF0dFBvc19YIiwiYXR0UG9zX1kiLCJhdHRVVl9YIiwiYXR0VVZfWSIsIkFUVFJJQlNfQ09VTlQiLCJzd2FwRGF0YSIsImluZGV4QSIsImluZGV4QiIsInB0ckEiLCJwdHJCIiwidG1wIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsInB1c2hEYXRhU3ViQXJyYXkiLCJlbmQiLCJOIiwic3ViRGF0YSIsInN1YmFycmF5IiwiYnVmZmVyU3ViRGF0YSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwibG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmYiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ1bmlmb3JtMWkiLCJwYWludCIsInVzZVByb2dyYW0iLCJCUEUiLCJzdHJpZGUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsInR5cGUiLCJjb2RlIiwic2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImRlZmF1bHQiLCJhdHRTaXplIiwiRFlOQU1JQ19EUkFXIiwic3ByaXRlcyIsImNyZWF0ZVRleHR1cmVGcm9tSW1hZ2UiLCJTcHJpdGVQYWludGVyIiwidXBkYXRlRGF0YSIsImVuYWJsZSIsImJsZW5kRnVuYyIsIlNSQ19BTFBIQSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJQT0lOVFMiLCJzcHJpdGUiLCJhdHRQb3NfWiIsIldhbGxQYWludGVyIiwiV2IiLCJYYiIsIllhIiwiaWR4IiwiVFJJQU5HTEVTIiwibWljZSIsImxhc3RUaW1lIiwiY2F0Iiwic3ByaXRlUGFpbnRlciIsInBhaW50ZXIiLCJyYW5kb20iLCJ2IiwiaXNPYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJpc1N0cmluZyIsIkhUTUxJbWFnZUVsZW1lbnQiLCJwYWludGVycyIsInBsYXlpbmciLCJnZXRDb250ZXh0IiwiUmVzaXplT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiY2xpZW50SGVpZ2h0IiwicmVzaXplIiwib2JzZXJ2ZSIsImFuaW1hdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0b3AiLCJ2aWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJ0ZXgiLCJpbWciLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJSRVBFQVQiXSwic291cmNlUm9vdCI6IiJ9